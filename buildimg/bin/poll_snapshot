#!/bin/bash

NAME=$(basename $0)
DIR=$(cd $(dirname $0)/.. && pwd -P)

function error() {
	echo ERROR: "$@" >&2
	echo "Usage: $NAME [-t interval] <name=repository url> [name=repo url ... ] [-- notify_cmd [args...]]" >&2
	echo "example: $NAME https://user:pass@download.tz.otcshare.org/snapshots/trunk/pc/latest" >&2
	exit 1
}

function info() {
	echo "$@" >&2
}

interval=0
while getopts t: name
do
	case $name in
		t) info "interval set to $OPTARG"
		   interval=$OPTARG
			;;
		*) error "Invalid argument $name"
		   ;;
	esac
done
shift $(($OPTIND - 1))

# parse remaining args: url1 url2 -- cmd args
isurl=1
URLS=
CMD=
for x in $*; do
	if [ "$x" == "--" ]; then
		isurl=0
	elif [ $isurl -eq 1 ]; then
		URLS+=" $x"
	else
		CMD+=" $x"
	fi
done

[ -z "$URLS" ] && error "Invalid repository URL"

function get_repo_release() {
	XMLSTARTLET=$(which xml || which xmlstarlet)

	# use builddata (on tizen.org or tz.otcshare.org)
	local rev
	rev=$(curl --silent $1/build.xml | $XMLSTARTLET sel  -t -v "/build/id/text()" 2>/dev/null)
	[[ -n "$rev" ]] && { echo $rev; return; }

	# use builddata with old scheme (on tizen.org or tz.otcshare.org)
	rev=$(curl --silent $1/builddata/build.xml | $XMLSTARTLET sel  -t -v "/build/id/text()" 2>/dev/null)
	[[ -n "$rev" ]] && { echo $rev; return; }

	# try to use repodata
	local ts
	ts=$(curl --silent $1/repodata/repomd.xml | $XMLSTARTLET sel -N r=http://linux.duke.edu/metadata/repo -t -v "/r:repomd/r:revision/text()" 2>/dev/null)
	[[ -n "$ts" ]] && { echo ${branch}_$(date +%Y%m%d.%H%M -d "@$ts"); return; }
	
	# bail out
	echo ${branch}_$(date +%Y%m%d.%H%M)
}

function show_release_old() {
	function playsound() {
	    (for x in "$@"; do sudo -s aplay $DIR/sounds/$x.wav </dev/null >/dev/null 2>&1 || true;done;)&
	}
	echo $(date +"%Y%m%d %H:%M:%S") "$1" "$2"
	case $1 in
	    devel*) 
		playsound donkey
		;;
	    common*)
		playsound notify2 notify
		;;
	    fail*)
		playsound gun
		;;
	    *)
		;;
	esac
}

function show_release() {
	echo $(date +"%Y%m%d %H:%M:%S") "$1" "$2"
	function say() {
		echo "$@" | sudo espeak -p 30 -s 150 -v en -a 150
	}
	case $1 in
		subcommand*)
			say "Running subcommand."
			;;
		done*)
			say "Subcommand finished."
			;;
	    fail*)
			say "Subcommand failed."
			;;
	    *) 
			a=$2
			a=${a//[-_]/ }
			a=${a//$(date +%Y%m)/}
			say "A new snapshot has landed for $1: $a"
			;;
	esac
}

declare -A urls
for u in $URLS; do 
	name=$(cut -f1 -d'=' <<<$u)
	if [ -z "$name" ]; then
		name="unknown"
	else
		url=$(cut -f2 -d'=' <<<$u)
	fi
	urls[$u]=$(get_repo_release $url)
	show_release $name ${urls[$u]}
done

[ $interval -eq 0 ] && exit 0

while [ 1 ]; do
	sleep $interval

	for u in ${!urls[@]}; do 
		name=$(cut -f1 -d'=' <<<$u)
		if [ -z "$name" ]; then
			name="unknown"
		else
			url=$(cut -f2 -d'=' <<<$u)
		fi

		newrelease=$(get_repo_release $url)

		if [ "$newrelease" == "unknown" ]; then
			continue
		fi

		if [ "${urls[$u]}" != "$newrelease" ]; then
			show_release $name $newrelease
			#notify-send "New snapshot available" "$release"
			if [ -n "$CMD" -a "$newrelease" != "unknown" ]; then
				#info "Running command $CMD $name $newrelease ..."
				show_release "subcommand $name $newrelease"
				$CMD $name $newrelease 
				if [ $? -eq 0 ]; then
					show_release "done"
				else
					show_release "fail"
				fi

				# poll again after test (as it could have taken quite long)
				rel=$(get_repo_release $url)
				[ "$rel" != "unknown" ] && newrelease=$rel
			fi

			urls[$u]=$newrelease
		fi
	done
done


