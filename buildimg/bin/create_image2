#!/bin/bash

# exclude other instances of this script
[ "${FLOCKER}" != "$0" ] && exec env FLOCKER="$0" flock -e "$0" "$0" "$@"

NAME=$(basename $0)
TOPDIR=$(cd $(dirname $0)/../.. && pwd -P)

function error() {
	echo ERROR: "$@" >&2
	echo "Usage: $NAME <branch> <flavour> <architecture> <kickstart file> <output dir> <snashot url> <repo subpath> [raw|liveusb]" >&2
	echo "example: $NAME devel standard x86_64 devel_standard.ks images https://user:pass@download.tz.otcshare.org/snapshots/trunk/pc/latest raw" >&2
	exit 1
}

function info() {
	echo "$@" >&2
}

#------------------- arguments parsing -----------------------------
branch=$1
shift
[ -z "$branch" ] && error "Invalid image branch (trunk / devel / daily / weekly)"

flavour=$1
shift
[ -z "$flavour" ] && error "Invalid flavour (standard / firstboot / wrt ...)"

arch=$1
shift
[ -z "$arch" ] && error "Invalid architecture: use x86_64, i586 or armv7l"

ksfile=$1
shift
[ -z "$ksfile" ] && error "Invalid KS file"

outputdir=$1
shift
[ -z "$outputdir" ] && error "Invalid output dir"
mkdir -p $outputdir
[ ! -d "$outputdir" ] && error "Unable to create output dir"

snapurl=$1
shift
[ -z "$snapurl" ] && error "Invalid snapshot URL"

subpath=$1
shift
[ -z "$subpath" ] && error "Invalid repo subpath"

repourl=$snapurl/$subpath
echo "Repo URL: $repourl"

imgtype=${1:-raw}
case $imgtype in
	raw|liveusb)
		;;
	*) 
		error "Invalid image type: must be raw or liveusb"
		;;
esac

#------------------------------------------------------------------

# source tzconfig
if [ ! -f ~/.tzconfig ]; then
	error "~/.tzconfig is not configured. See README."
fi
. ~/.tzconfig

if [ -z "$TZURL" ]; then
	error "TZURL is not defined in ~/.tzconfig."
fi

# check mic release
mic_ver=$(mic --version | awk '{print $2}')
if ! egrep "^(0.16|0.17|0.18|0.18.1|0.19.1|0.19.3|0.21|0.22|0.23|0.23.1|0.24|0.25)" <<<$mic_ver >/dev/null 2>&1; then
	error "Mic version mismatch: mic 0.16 or 0.17 or 0.18 or 0.18.1 or 0.19.1 or 0.19.3 or 0.21 or 0.22 or 0.23(.1) or 0.24 or 0.25 is required"
fi

# check lzop
if [ -z $(which lzop) ]; then
	error "Lzop not installed: sudo zypper in lzop"
fi

#------------------------------------------------------------------

function get_repo_release() {
	XMLSTARTLET=$(which xml || which xmlstarlet)

	# use builddata (on tizen.org or tz.otcshare.org)
	local rev
	rev=$(curl --silent $1/build.xml | $XMLSTARTLET sel  -t -v "/build/id/text()" 2>/dev/null)
	[[ -n "$rev" ]] && { echo $rev; return; }

	# use builddata with old scheme (on tizen.org or tz.otcshare.org)
	rev=$(curl --silent $1/builddata/build.xml | $XMLSTARTLET sel  -t -v "/build/id/text()" 2>/dev/null)
	[[ -n "$rev" ]] && { echo $rev; return; }

	# try to use repodata
	local ts
	ts=$(curl --silent $1/repodata/repomd.xml | $XMLSTARTLET sel -N r=http://linux.duke.edu/metadata/repo -t -v "/r:repomd/r:revision/text()" 2>/dev/null)
	[[ -n "$ts" ]] && { echo ${branch}_$(date +%Y%m%d.%H%M -d "@$ts"); return; }
	
	# bail out
	echo ${branch}_$(date +%Y%m%d.%H%M)
}

curdir=$(pwd -P)

cd $curdir

# get snapshot id
snapshot=$(get_repo_release $snapurl)
info "Detected snapshot: $snapshot"

# substitute the detected snapshot with 'latest' in URL if any
repourl_real=$(echo $repourl | sed -e "s|/latest$|/$snapshot|")

function generate_ks_aux() {
	local infile=$1 outfile=$2 incdir=$3

	# substitute vars @xxx@ and solve %include
	awk \
		-v ksdir="$incdir" \
		-v repourl="$repourl_real" \
		-v tzurl="$TZURL" \
		-v topdir="$TOPDIR" \
		-v branch="$branch" \
		-v snapshot="$snapshot" \
		-v flavour="$flavour" \
		-v imgtype="$imgtype" \
		'/#.*$/ { 
			print;
			next;
		}
		{
			gsub("@REPO_URL@",repourl)
			gsub("@TZ_URL@",tzurl)
			gsub("@BRANCH@",branch)
			gsub("@SNAPSHOT@",snapshot)
			gsub("@TOPDIR@",topdir)
			gsub("@FLAVOUR@",flavour)
			gsub("@MEDIUM@",imgtype)
		}
		$1=="%include" {
			f=ksdir "/" $2
			print "# BEGIN including " f
			while ( (getline line <f) == 1 ) print line
			print "# END including " f
			next
		}1' $infile >$outfile
	grep -qE '^\s*%include' $outfile
}

function generate_ks() {
	local infile=$1 outfile=$2 incdir=$(dirname $1) tmp=$2.tmp

	cp $infile $tmp
	cat >>$tmp <<'EOF'
%post --nochroot
echo "@BRANCH@ @BUILD_ID@ @ARCH@" >$INSTALL_ROOT/etc/tizen-snapshot
%end
EOF
	infile=$outfile
	mv -f $tmp $infile

	while generate_ks_aux $infile $tmp $incdir; do
		infile=$outfile
		mv -f $tmp $infile
	done
	generate_ks_aux  $tmp $outfile $incdir
	rm $tmp
}

function prepare_ks() {
	local infile=$1 outfile=$2
	if [[ "$infile" =~ ^http(s)?:\/\/ ]]; then
		# fetch ks from image-configurations package
		echo "Fetching ks from $infile"
		wget -O ${outfile}.webtmp $infile

		echo "Patching KS for FR keyboard"
		# fix locale
		sed -ri "s|^lang en_US.UTF-8$|lang fr_FR.UTF-8|" ${outfile}.webtmp
		sed -ri "s|^keyboard us|keyboard fr|" ${outfile}.webtmp

		cat >>${outfile}.webtmp <<'EOB'
%post

# patch from create_image2 (qaserver.vannes only)
if [ -f /etc/xdg/weston/weston.ini ]; then
	cat >>/etc/xdg/weston/weston.ini <<'EOF'
[keyboard]
keymap_layout=fr
EOF
fi
%end
EOB

		# QA & AUTOQA stuff
		# Taken from meta-generic:scripts/generic-autoqa.post
		cat >>${outfile}.webtmp <<'EOB'
%packages

@Generic Automated QA Tools
@Generic QA Tools
@Common QA Tools

%end
EOB

		cat >>${outfile}.webtmp <<'EOB'
%post
EOB
		curl --silent "https://review.tizen.org/git/?p=platform/upstream/meta-generic.git;a=blob_plain;f=scripts/generic-autoqa.post;hb=refs/heads/tizen" >>${outfile}.webtmp
		cat >>${outfile}.webtmp <<'EOB'
%end
EOB

		generate_ks ${outfile}.webtmp $outfile
		rm ${outfile}.webtmp

		# fix repo name
		sed -ri "s|^(repo.*--name=)[^ ]+(.*)$|\1$branch\2|" $outfile

		# fix partition size
		sed -ri "s|^(part .*--size=)([0-9]+)(.*$)|\16144\3|" $outfile
	else
		generate_ks $infile $outfile
	fi
}

# process input ks to generate 
prepare_ks $ksfile $outputdir/$imgtype.ks

cd $outputdir

info "Generating image in $(pwd)" 

yes | time sudo -E mic create $imgtype $imgtype.ks \
	--outdir=. \
	--arch=$arch \
	--verbose \
	--debug \
	--generate-bmap \
	--release=$snapshot \
	--logfile=${snapshot}-${imgtype}.log 

rc=$?
if [ $rc -ne 0 ]; then
	error "Mic failed"
fi

# restore permissions for qadmin user
sudo chown -R $USER .

# only latest link for raw images (used to flash automatically targets in raw mode)
if [ "$imgtype" == "raw" ]; then
	rawimg=$(find $snapshot/images -type f -name "*.raw")

	# create a bmap for image
	#bmaptool create -o $snapshot.bmap $rawimg

	# compress using lzop
	info "Compressing raw image"

	time lzop -5 -v -U -S .lzo $rawimg
	#image is now named $rawimg.lzo
	ln -sf $rawimg.lzo latest

	# parallel XZ compression
	#pxz -0 $rawimg
	# image is now named *.raw.xz
	#ln -sf $rawimg.xz latest
elif [ "$imgtype" == "liveusb" ]; then
	usbimg=$(find $snapshot/images -type f -name "*.img")

	ln -sf $usbimg latest
fi

cat <<EOF >latest.id
SNAPSHOT=$snapshot
BRANCH=$branch
FLAVOUR=$flavour
EOF

rm $imgtype.ks

info "Done" 

