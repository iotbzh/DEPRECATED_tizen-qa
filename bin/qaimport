#!/usr/bin/env node

/*
 * QA Import command
 * Author: St√©phane Desneux <sdx@kooltux.org>
 * Date: 2013-03-13
 *
 * This command can be used to import QA Database from various formats
 *
 * Copyright 2013, Intel Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

var _=require('underscore');
var util=require('util');
var log4js=require("log4js");
var path=require("path");

var DEBUG=false;

var TOPDIR=path.resolve(path.join(path.dirname(__filename),".."));
var NAME=path.basename(__filename);

var logger=log4js.getLogger(NAME);

/* find default db dir and config dir */
var DBDIR=path.resolve(path.join(TOPDIR,"db"));
var CFGDIR=path.resolve(path.join(TOPDIR,"etc"));

DEBUG && logger.debug("Top dir: "+TOPDIR);
DEBUG && logger.debug("Config dir: "+CFGDIR);
DEBUG && logger.debug("Db dir: "+DBDIR);

var QA=require('libqa');

var optimist = require('optimist')
	.usage("Usage: "+NAME+" [options]")
	.options('h',{
		boolean: true,
		alias:'help',
		describe: 'Get help',
	})
	.options('i',{
		demand: false,
		string: true,
		alias:'input',
		describe: 'input file',
		default: "-" // stdin
	})
	.options('n',{
		boolean:true,
		alias:'dryrun',
		describe: 'Dry-run (do nothing)',
		default: false
	})
	.options('d',{
		alias: 'db',
		demand: false,
		describe: "Test database top directory",
		default: DBDIR
	})
	.options('c',{
		alias: 'config',
		demand: false,
		describe: "Config dir",
		default: CFGDIR
	})
	.check(function(argv) { 
		// check unique options
		['input','db','config'].forEach(function(opt) {
			if (typeof argv[opt] != 'string') { throw new Error(opt+' must be unique'); }
		});
	});

var argv=optimist.argv;
if (argv.help) {
	optimist.showHelp();
	process.exit(1);
}

var qaimport=new QA.Import({
	configdir: argv.config,
	dbdir: argv.db,
	input: argv.input
});

if (argv.dryrun) {
	qaimport.enableDryRun();
}

qaimport.execute();

