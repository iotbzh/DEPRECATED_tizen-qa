/*
 * TKIT TestKit class
 * Author: Jose Bollo <jobol@nonadev.net>
 * Author: Nicolas Zingil√© <nicolas.zingile@open.eurogiciel.org>
 * Date: 2013-01-29
 *
 * Copyright 2013, Intel Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

var _=require('underscore');
var util=require('util');
var log4js=require("log4js");
var path=require("path");
var fs=require('fs');
var glob=require('glob');
var XMLWriter = require('xml-writer');

var logger=log4js.getLogger("tkittkit");

var TKIT=require('libtestkit');

var DEBUG=true;

/* typical XML:
 *
	<test_definition>
		<suite name="common/xxx">
			<set name="yyy">
				<testcase id="zzz" priority="0" execution_type="auto" status="approved" type="functional_positive" purpose="describe something">
					<description>
						<test_script_entry test_script_expected_result="0">/usr/bin/echo "Hello World"</test_script_entry>
					</description>
				</testcase>
				<testcase...>
					...
				</testcase>
			</set>
		</suite>
	</test_definition>
*/
/*
Builds a TestKit object.
*/

var basepath="";
var xwcore=null;
var PROFILES=["common", "ivi", "mobile"];
var testkitcorefile = "testkit.xml";
var testkitwebfile = "";
var testkit_file_list = []; // table of objects { name : "setname", isweb: boolean }
var filter = function(testcase) {
	return ((testcase.exec_type=="auto") && /^(ready|approved|designed)/.test(testcase.status) && true);
};

module.exports.createXMLFiles=function(dbdir, profile, suite, outdir) {
	// check if the profile is valid
    if (PROFILES.indexOf(profile) < 0){
        logger.error("Profile '" + profile + "' is not supported !");
        process.exit(1);
    }
    
	// create a Database object
    database = new TKIT.Database(path.resolve(dbdir));

    // create a Testsuite object
    suitepkgname = profile + "-" + suite + "-suite";
    suitedirs = glob.sync("[0-9A-Z][0-9A-Z]-" + profile + "/[0-9A-Z][0-9A-Z]-" + suite, {cwd:dbdir});
    if (suitedirs.length != 1){
        logger.error("Suite not found or there's two suite with same name in the same directory");
        process.exit(1);
    }
    suitedir = suitedirs.join('');
    testsuite = new TKIT.Testsuite(database, suitedir, filter);

    // check if output directory is valid
    outdirpath = path.resolve(outdir);
    try {
        lstats = fs.lstatSync(outdirpath);
    }
    catch(error){
        logger.error("Path doesn't exists !\n" + error.message);
        process.exit(1);
    }

    if (! lstats.isDirectory()) {
        logger.error("Output path is not a directory");
        process.exit(1);
    }

	basepath = path.join(TKIT.GLOBALS.test_prefix, profile, suitepkgname, dbdir);
    testkitcorefile = path.join(outdirpath, testkitcorefile);
    xwcore=new XMLWriter(true);
    xwcore.startDocument();
	xwcore.startElement("test_definition");
        xwcore.startElement("suite");
		xwcore.writeAttribute("name",testsuite.getName());

    testsuite.forEachTestset(function(tset,tsuite) {

		if (tset.isWebSet()){
			writeWebXML(tset, tsuite, outdir);
		}
		else {
			writeCoreXML(tset, outdir);
		}
    });

	    xwcore.endElement("suite");
	xwcore.endElement("test_definition");
    xwcore.endDocument();

    xwcore.toString();
    DEBUG && logger.debug("Writing testkit file " + testkitcorefile);
    fs.writeFileSync(testkitcorefile, xwcore);
    testkit_file_list.push({name: path.basename(testkitcorefile), isweb: false});

    return testkit_file_list;
}

function writeCoreXML(tset, outdir) {
    logger.info("set " + tset.getName() + " is core");
    xwcore.startElement("set");
	xwcore.writeAttribute("name",tset.getComponentName());

	   tset.forEachTestcase(writeCoreTestCase,xwcore);

    xwcore.endElement("set");
}
function writeWebXML(tset, tsuite, outdir) {
    logger.info("Set " + tset.getName() + " is web");
    testkitwebfile = path.join(outdir, tset.getShortName() + ".xml");
    logger.info("Generating XML instructions for set " + tset.getDirPath());
    var xweb=new XMLWriter(true);

    xweb.startDocument();
        xweb.startElement("test_definition");
            xweb.startElement("suite");
                xweb.writeAttribute("launcher","xwalk"); // attribute required to run web tests
                xweb.writeAttribute("name",tsuite.getName());

                xweb.startElement("set");
		    xweb.writeAttribute("name",tset.getComponentName());

                    tset.forEachTestcase(writeWebTestCase,xweb);

                xweb.endElement("set");
            xweb.endElement("suite");
        xweb.endElement("test_definition");
    xweb.endDocument();
    xweb.toString();

    logger.info("Testkit XML of set " + tset.getDirPath() + " generated");

    DEBUG && logger.debug("Writing testkit file " + testkitwebfile);
    fs.writeFileSync(testkitwebfile, xweb);
    testkit_file_list.push({name: path.basename(testkitwebfile), isweb: true});
}


/*
Emits into 'xw' the XML testkit data for the 'tc' testcase.
*/
function writeCoreTestCase(tc) {

	var xw=this;
	var purpose=[
			"Objective: "+(tc.objective || "<not defined>"),
			"Description: "+(tc.description || "<not defined>")
		].join(" - ");

	xw.startElement("testcase");
		xw.writeAttribute("id",tc.getId());
		xw.writeAttribute("name",tc.name);
		xw.writeAttribute("priority","P"+tc.priority);
		xw.writeAttribute("execution_type",tc.exec_type);
		xw.writeAttribute("component",tc.getComponentName());
		xw.writeAttribute("status",tc.status);
		xw.writeAttribute("type",tc.type);
		xw.writeAttribute("purpose",purpose);

		xw.startElement("description");

			if (tc.exec_type == "auto") {
				xw.startElement("test_script_entry");
					xw.writeAttribute("test_script_expected_result", tc.exec_expected_retcode.toString());
					xw.writeAttribute("timeout", tc.exec_kill_timeout.toString());
					
					xw.writeCData(tc.getScript(basepath,";"));

				xw.endElement("test_script_entry");
			}

		xw.endElement("description");

	xw.endElement("testcase");
}

/*
Emits into 'xw' the XML testkit data for the 'tc' testcase : tc is a web testcase.
*/
function writeWebTestCase(tc) {

	var xw=this;
	var purpose=[
			"Objective: "+(tc.objective || "<not defined>"),
			"Description: "+(tc.description || "<not defined>")
		].join(" - ");

	xw.startElement("testcase");
		xw.writeAttribute("id",tc.getId());
		xw.writeAttribute("name",tc.name);
		xw.writeAttribute("priority","P"+tc.priority);
		xw.writeAttribute("execution_type",tc.exec_type);
		xw.writeAttribute("component",tc.getComponentName());
		xw.writeAttribute("status",tc.status);
		xw.writeAttribute("type",tc.type);
		xw.writeAttribute("purpose",purpose);
		// add onload_delay attribute if defined in tc
		// this attribute appears in some web test cases
		if (tc.onload_delay && tc.onload_delay != 0) {
		    xw.writeAttribute("onload_delay",tc.onload_delay);
		}

		xw.startElement("description");

			if (tc.exec_type == "auto") {
				xw.writeElement("test_script_entry", tc.exec);
			}

		xw.endElement("description");

	xw.endElement("testcase");
}
