/*
 * TKIT Utils
 * Author: St√©ane Desneux <sdx@kooltux.org>
 * Date: 2013-01-10
 *
 * Copyright 2013, Intel Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

var log4js=require("log4js");
var path=require("path");
var spawn = require('child_process').spawn
var _=require('underscore');

var logger=log4js.getLogger("tkitutils");

var DEBUG=false;

/*-------- Management of encoded name ----------------------*/

var base36="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
var testDirValidator = /^[0-9A-Z][0-9A-Z]-/

/*
'ordname' is a string like 'XX-name' where XX is
a 36 base encoded value.
Return true if 'ordname' conforms to this definition.
*/
module.exports.isTestDir=function(ordname) {
	return testDirValidator.test(ordname);
}

/*
'ordname' is a string like 'XX-name' where XX is
a 36 base encoded value.
Return the 'name' component of 'ordname'.
*/
module.exports.stripName=function(ordname) {
	if (testDirValidator.test(ordname)) return ordname.slice(3);
	throw new Error("Unstrippable ordname '"+ordname+"'")
}

/*
'ordname' is a string like 'XX-name' where XX is
a 36 base encoded value.
Return the 'XX' component of 'ordname'.
*/
module.exports.getPrefix=function(ordname) {
	if (testDirValidator.test(ordname)) return ordname.slice(0,2);
	throw new Error("Unprefixable ordname '"+ordname+"'")
}

/*
Return an array containing the stripped names
contained in the array 'dirs'. See 'stripName'.
*/
module.exports.stripPath=function(dirs) {
	return dirs.map(module.exports.stripName);
}

/*
Return an array containing the prefix names
contained in the array 'dirs'. See 'getPrefix'.
*/
module.exports.pathToId=function(dirs) {
	// convert ['AA-foo','BB-bar','CC-baz'] to 'AA-BB-CC'
	return dirs.map(module.exports.getPrefix).join("-");
}

/*
Returns the string 'XX-name' where XX is the 36 base encode of num
and 'name' is 'name'.
*/
module.exports.encodeName=function(num,name) {
	if (num >= (36*36)) {
		throw new Error("Unable to encode object name if order num >= "+(36*36));
	}

	// from a number and a name, encode XX-name
	var low = num % 36;
	var upp = (num - low) / 36;

	return base36[upp]+base36[low]+"-"+name;
}

/*------------------------------------------------*/

/* Filter Not Empty String */
module.exports.fnes=function(x) {
	return x && (typeof x == 'string'); 
}

var dirstack=[];

/*
Set the working directory to 'dir' but before that,
records in a stack the current working dir such that
a call to 'popd' restore it.
*/
module.exports.pushd=function(dir) {
	dirstack.push(process.cwd());
	process.chdir(dir);
}

/*
Restore the working directory saved by the previous 'pushd'.
*/
module.exports.popd=function() {
	process.chdir(dirstack.pop());
}

/*------------------------------------------------*/

/*
Ensure that 'x' is an array. If 'x' is an Array then it 
returns 'x' else it returns an array containing only 'x'.
*/
module.exports.splat=function(x) {
	return (x instanceof Array) ? x : [ x ];
}
