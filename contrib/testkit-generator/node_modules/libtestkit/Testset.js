/*
 * TKIT Testset class
 * Authors: Stéphane Desneux <sdx@kooltux.org>
			Nicolas Zingilé <nicolas.zingile@open.eurogiciel.org>
 * Date: 2013-01-10
 *
 * Copyright 2013, Intel Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

var _=require('underscore');
var util=require('util');
var log4js=require("log4js");
var path=require("path");

var logger=log4js.getLogger("tkitset");

var TKIT=require('libtestkit');

var DEBUG=false;

/*
Builds a Testset object.
Parameters:
 - testdir (Object Database.TestDir): the TestDir that contains the testset.
*/
var Testset=module.exports=function(testdir) {
	this.testdir = testdir;

	this.cases=[];

	DEBUG && logger.debug("Testset "+this.getDirPath()+" created: "+util.inspect(this));
}

/*
Add the cases of 'tcasedef' to the testcases.
'filename' is the filename within the directory containing the testcases of 'tcasedef'.
*/
Testset.prototype.addCases=function(tcasedef,filename) {
	if (!(tcasedef instanceof Array)) {
		throw new Error("Testset "+this.getDirPath()+": invalid Testset definition (should be an array)");
	}

	tcasedef.forEach(function(tcdef,idx) {
		this.cases.push(new TKIT.Testcase(this,this.cases.length+1,tcdef,filename));
	},this);
}

/*
Remove all the testcases for wich the function 'filterCaseFunc' returns false.
'filterCaseFunc' is a function that take one argument: a testcase object
and that returns a boolean value. Testcases for wich the function returns
true are keeped, other are dropped.
*/
Testset.prototype.applyFilter=function(filterCaseFunc) {
	DEBUG && logger.debug("Testset "+this.getDirPath()+": "+this.cases.length+" cases before filtering");

	if (typeof filterCaseFunc != 'function') {
		throw new Error("TestSet "+this.getDirPath()+": invalid filter func");
	}
	this.cases=this.cases.filter(filterCaseFunc);

	DEBUG && logger.debug("Testset "+this.getDirPath()+": "+this.cases.length+" cases after filtering");
}

/*
Return true if the testset has no testcase.
*/
Testset.prototype.isEmpty=function() {
	return (this.cases.length==0);
}

/*

Return true if the testset is a Web set ie : "tct" or "webapi" or "abat" is present
*/
Testset.prototype.isWebSet=function() {
	var setname = this.getName();
	return ((setname.indexOf('tct') != -1) || (setname.indexOf('webapi') != -1) || (setname.indexOf('web') != -1));
}

/*
Call 'cb' with this set to 'thisArg' and with first parameter a Testcase
for each testcase of the set.
*/
Testset.prototype.forEachTestcase=function(cb,thisArg) {
	return this.cases.forEach(cb,thisArg);
}

/*
Returns the relative path of the directory of the testset.
*/
Testset.prototype.getDirPath=function(prefix) {
	return this.testdir.getDirPath(prefix);
}

/*
Returns the exec path within the directory of the testset.
*/
Testset.prototype.getExecPath=function(prefix) {
	return this.testdir.getExecPath(prefix);
}

/*
Return the component name of the testset
*/
Testset.prototype.getComponentName=function() {
	return this.testdir.getComponentName();
}

/*
Return the id of the testset
*/
Testset.prototype.getId=function() {
	return this.testdir.getId();
}

/*
Return the name of the testset
*/
Testset.prototype.getName=function() {
	return this.testdir.getName();
}

/*
Return the shortname of the testset
*/
Testset.prototype.getShortName=function() {
	return this.testdir.getShortName();
}
