/*
 * QA hardware library - Device module
 * Author: St√©phane Desneux <sdx@kooltux.org>
 * Date: 2013-04-15
 *
 * Copyright 2013, Intel Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

var _=require('underscore');
var util=require('util');
var log4js=require("log4js");
var path=require("path");
var fs=require('fs');

var logger=log4js.getLogger("hardware");

var HW=require('libhardware');

var DEBUG=false;

var DEFAULT_DEVICE={
	product: "",
	platform: "",
	description: "",
	hostname: "",
	mac_address: "",
	ip_address: "",
	comment: ""
};

var Device=module.exports=function(opts) {
	_.extend(this,DEFAULT_DEVICE);
	_.extend(this,opts||{});

	if (!this.id) throw new Error("Invalid device id for "+util.inspect(opts));

	if (!/^[a-zA-Z0-9_-]+$/.test(this.hostname)) throw new Error("Invalid host name for "+this.id+" (must match [a-zA-Z0-9_-]+ and doestn't contain domain name)");

	if (!/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/.test(this.ip_address))
		throw new Error("Invalid IP address for "+this.id);

	if (!/^[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}$/.test(this.mac_address))
		throw new Error("Invalid MAC address for "+this.id);

	// convert mac to lower case
	this.mac_address=this.mac_address.toLowerCase();
}

/* return the definition of the device, as stored in config file */
Device.prototype.definition=function() {
	var obj={};
	_.keys(DEFAULT_DEVICE).forEach(function(k) {
		obj[k]=this[k];
	},this);
	return obj;
}


