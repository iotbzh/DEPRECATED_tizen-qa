#!/usr/bin/env node

/*
 * QA Hardware Target command
 * Author: St√©phane Desneux <sdx@kooltux.org>
 * Date: 2013-04-15
 *
 * This command can be used to import QA Database from various formats
 *
 * Copyright 2013, Intel Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

var _=require('underscore');
var util=require('util');
var log4js=require("log4js");
var path=require("path");
var fs=require("fs");

var DEBUG=false;

var TOPDIR=path.resolve(path.join(path.dirname(__filename),".."));
var NAME=path.basename(__filename);

var logger=log4js.getLogger(NAME);

var HW=require('libhardware');

var optimist = require('optimist')
	.usage([
		"Usage: "+NAME+" -c <config dir> <command> [ arguments ]",
		"",
		"Commands:",
		"   add <id> <hostname> <ip_address> <mac_address> [product] [platform] [description] [comment]: declares a new host",
		"   remove <id> : removes a host",
		"   list : list known ids with hostname, ip address and mac address"
	].join("\n"))
	.options('h',{
		boolean: true,
		alias:'help',
		describe: 'Get help',
	})
	.options('c',{
		alias: 'config',
		string: true,
		demand: true,
		describe: "Configuration dir",
		default: null
	})
	.check(function(argv) { 
		// check unique options
		['config'].forEach(function(opt) {
			if (typeof argv[opt] != 'string') { throw new Error(opt+' must be unique'); }
		});

		// check that config dir exists
		if (!fs.existsSync(argv.config)) {
			throw new Error(argv.config+": directory not found");
		}
	});


var mgr;

var commands={
	add: function(id,hostname,ip,mac,product,platform,description,comment) {
		if (!id) throw new Error('Invalid id');
		if (!hostname) throw new Error('Invalid hostname');
		if (!ip) throw new Error('Invalid IP');
		if (!mac) throw new Error('Invalid mac');
		product=product||"";
		platform=platform||"";
		description=description||"";
		comment=comment||"";

		mgr.addDevice({
			id: id,
			hostname: hostname,
			ip_address: ip,
			mac_address: mac,
			product: product,
			platform: platform,
			description: description,
			comment: comment
		});

		mgr.saveDevices();
	},

	remove: function(id) {
		if (!id) throw new Error('Invalid id');

		mgr.removeDevice(id);
		mgr.saveDevices();
	},

	list: function() {
		mgr.forEachDevice(function(dev) {
			console.log("%s\t%s\t%s\t%s",
				dev.id, dev.hostname, dev.ip_address, dev.mac_address
			);
		});
	}
};

// --------------

var argv=optimist.argv;
if (argv.help) {
	optimist.showHelp();
	process.exit(1);
}

// instanciate hardware manager
mgr=new HW.Manager(argv.config);

// get command
var cmd=argv._.shift();

if (!(cmd in commands)) {
	logger.error("Unknown command '"+cmd+"'");
	optimist.showHelp();
	process.exit(1);
}

// execute command with remaining arguments from the command line
try {
	process.exit( commands[cmd].apply(this,argv._) ? 0 : 1);
}
catch(e) {
	logger.error(e);
	process.exit(1);
}





