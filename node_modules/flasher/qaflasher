#!/usr/bin/env node

/*
 * Copyright 2013, Intel Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

var _=require('underscore');
var util=require('util');
var log4js=require('log4js');

// ------------- global variables --------
var CONFIG;

// ------------- setup log ---------------
var logger;

function initLog(cfg) {
	if (logger) return;

	cfg.log=_.extend({
		file:'qaflasher.log',
		maxsize: null,
		backup: null,
		level: 'INFO'
	},cfg.log || {});

	console.log("Redirecting log to "+cfg.log.file+" (maxsize="+cfg.log.maxsize+" backup="+cfg.log.backup+" level="+cfg.log.level+")");

	log4js.clearAppenders();
	log4js.loadAppender("file");
	log4js.addAppender(log4js.appenders.file(
		cfg.log.file,
		null,
		cfg.log.maxsize*1024 || 1024*1024,
		cfg.log.backup || 5
	));

	logger=log4js.getLogger("main");
	logger.setLevel(cfg.log.level);
}

// ------------- load config -------------

function loadConfig(file) {
	if (!file) {
	    console.log("Error: no configuration file given");
	    return false;
	}

	console.log("Loading config from "+file);
	var cfg=require(file);

	initLog(cfg);

	return cfg;
}

// ------------- init wwwserver ----------

function initWWWServer() {
	var WWWServer=require("./WWWServer.js");
	var srv=new WWWServer(CONFIG.www);
	srv.listen();
}

// -------------------------- main program ------------------------

function main() {
	console.log("---------------------------------------------------");

	// build arguments array (argv[0] is 'node', argv[1] is this script)
	var argv=process.argv.slice(2);

	// assume that config file is passed as argument (array or string)
	var cfgfile;
	if (argv.length) {
	    if ((argv instanceof Array) && (argv.length)) {
		cfgfile=argv[0];
	    }
	    else if (typeof argv == "string") {
		cfgfile=argv;
	    }
	}

	CONFIG=loadConfig(cfgfile);
	if (!CONFIG)
		throw new Error("Unable to load configuration from "+cfgfile);
	logger.info("-------------- new daemon session -----------------");

	// ------------- install exceptions & signal handlers ----------------

	process.on("uncaughtException", function(err) { 
		logger.fatal(err.stack); 
	});

	['SIGHUP','SIGINT','SIGQUIT','SIGTERM'].forEach(function(sig) {
		process.on(sig, function() {
			logger.info("Stopping...");
			process.exit(1);
		});
	});

	initWWWServer();
}

main();


