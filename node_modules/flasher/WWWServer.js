/*
 * Copyright 2013, Intel Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright 2013, Intel Inc.
 * This program is free software; you can redistribute it and/or modify
 */

var _=require('underscore');
var util=require('util');
var log4js=require("log4js");
var path=require("path");

var express = require('express');
var http = require('http');

var logger=log4js.getLogger("www");

var DEBUG=true;

var WWWServer=module.exports=function(opts) {
	var cfg=_.extend({
		// listen port
		port: 8080,
		confdir: 'etc',
		htdocs: 'htdocs',
		timeout: 5000,
		title: "QA Server"
	},opts || {});

	// resolve confdir and htdocs dir
	cfg.confdir=path.resolve(__dirname,cfg.confdir);
	cfg.htdocs=path.resolve(__dirname,cfg.htdocs);

	DEBUG && logger.debug("Creating www server with config: "+util.inspect(cfg));
	_.extend(this,cfg);
}

WWWServer.prototype.listen=function(cb) {
	this._configure();

	this._server=http.createServer(this._app);
	
	var self=this;
	this._server.listen(this.port,function() {
		logger.info("Listening on port "+self.port);
		if (cb) cb.call(null,null,this._server,this._app); // cb(err,server,app)
	});
}
	
WWWServer.prototype._configure=function() {
	var app=this._app=express();

	/******** express configuration **********/
	
	// init view engine
	app.set('title', this.title);
	app.set('views', __dirname + '/views');
	app.set('view engine', 'jade');

	// logger, timeout, error handler ...
	app.use(express.timeout(this.timeout));
	if (DEBUG) {
		app.use(express.logger({
		    format: 'short',
		    stream: { 
			write: function() {
			    logger.debug(Array.prototype.join.call(arguments).trimRight());
			}
		    }
		}));
		app.use(express.errorHandler());
	}

	// favicon handling
	app.use(express.favicon(this.htdocs+'/ico/icon_qaserver.ico'));

	// other middleware
	app.use(express.bodyParser());
	app.use(express.methodOverride());
	app.use(express.cookieParser('QASERVER COOKIE SECRET'));
	app.use(express.session());

	// static htdocs dir
	app.use(express.static(this.htdocs));
	app.use(express.directory(this.htdocs));

	/*************** routes  *****************/
	// declare router
	app.use(app.router);

	// index is served by static data

	// add custom routes
	this._declare_route("netboot","/netboot");
	
	// a 500 error (useful to keep around)
	app.get('/500', function(req, res){
		throw new Error("Generic error");
	});

	//The 404 Route (ALWAYS Keep this as the last route)
	function NotFound(msg){
		 this.name = 'NotFound';
		 Error.call(this, msg);
		 Error.captureStackTrace(this, arguments.callee);
	}
	app.get('/*', function(req, res){
		throw new NotFound;
	});

	/************* last middleware **********/

	// less CSS templates
	//app.use(require('less-middleware')({ src: this.htdocs+"/css/less" }));
	
	// finally, a catch-all error handler
	var self=this;
	app.use(function(err,req,res,next) {
		if (err instanceof NotFound) {
			res.writeHead(404,"Not found",{"Content-Type":"text/html"});
			res.end("<html><head><title>"+self.title+" - 404 : Not found</title></head><body><H1>Page not found</H1></body></html>");
		}
		else {
			res.writeHead(500,"Internal server error",{"Content-Type":"text/html"});
			res.end("<html><head><title>"+self.title+" - 500 : Internal server error</title></head><body><H1>The server encountered an error</H1><p>"+err+"</p></body></html>");
		}
	});

	return app;
}

WWWServer.prototype._declare_route=function(controller,prefix) {
	prefix=prefix||"";
	if (prefix[prefix.length-1]!='/') { // add trailing slash if needed
		prefix+="/";
	}

	// load route file for controller and call the function with this=wwwserver
	require('./routes/'+controller).call(this,this._app,prefix);
}

