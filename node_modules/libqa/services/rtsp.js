/*
 * QA service Rtsp class
 * Author: Jose Bollo <jobol@nonadev.net>
 * Date: 2013-01-30
 *
 * Copyright 2013, Intel Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

var _=require('underscore');
var util=require('util');
var log4js=require("log4js");
var spawn = require('child_process').spawn;

var path=require("path");
var http=require("http");
var url=require('url');
var fs=require('fs');
var mime=require('simple-mime')('application/octect-stream');

var logger=log4js.getLogger("qasrvrtsp");

var QA=require('libqa');

var DEBUG=false;

var STATES={
	off: 'off',
	enabled: 'enabled',
	starting: 'starting',
	error: 'error',
	on: 'on'
};

/*
Creates the service 
*/
var Me=module.exports=function(manager,name) {
	logger.info("Activation of the service RTSP");
	this.manager=manager;
	this.name=name;
	this.config=_.extend({host:"localhost",port:8554,command:'live555MediaServer'},QA.GLOBALS.service_rtsp);
	this.config.port=8554;
	this.server=null;
	this.state=STATES.off;
	this.baseurl="rtsp://"+this.config.host+":"+this.config.port+"/";
	this.dir=manager.getDir();
}

/*
Returns the name of the service.
*/
Me.prototype.getName=function(){
	return this.name;
}

/*
Returns the description of the service.
*/
Me.prototype.describe=function(){
	return '{ Service '+this.name+': state='+this.state+' baseurl='+this.baseurl+' }';
}

/*
Set the required 'spec' of service for the testcase 'tc'.
 - 'spec' (Any): is something telling the requiring of service.
 - 'tc' (QA.Testcase): is the testcase that requires the service
*/
Me.prototype.addTestcase=function(spec,tc){
	if(spec===false) return;
	if(spec===true) spec={enable:true}
	if(!spec.enable) return;
	this.activate();
	tc.addService(this);
}

Me.prototype.activate=function(){
	if (this.state===STATES.off) {
		logger.info("Enabling "+this.describe());
		this.state=STATES.enabled;
	}
}

/*
*/
Me.prototype.start=function(cb){
	if (this.state===STATES.enabled) {
		this.state=STATES.starting;
		logger.info("Starting "+this.describe());
		this.server=spawn(this.config.command,[],{cwd:this.dir,stdio:'inherit'});
		this.server.on('exit',(function(code,signal){
			this.state=STATES.enabled;
			this.server=null;
		    }).bind(this));
		setTimeout((function(){
			if(this.server) {
			    this.state=STATES.on;
			    cb(0);
			}
			else
			    cb(1);
		    }).bind(this),250);
	}
	else {
	    cb(0);
	}
}

/*
*/
Me.prototype.stop=function(cb){
	logger.info("Stopping "+this.describe());
	if(this.state===STATES.on) {
		this.server.kill();
	}
	cb();
}

/*
*/
/*
Export for the testcase 'tc' the base url for the directory before prepare script.
*/
Me.prototype.beforePreScript=function(tc){
	return 'export QA_RTSP_BASEURL="'+encodeURI(this.baseurl+tc.getDirPath())+'"';
}

