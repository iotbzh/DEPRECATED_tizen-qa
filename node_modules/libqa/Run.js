/*
 * QA Run class
 * Author: St√©phane Desneux <sdx@kooltux.org>
 * Date: 2013-01-10
 *
 * Copyright 2013, Intel Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

var _=require('underscore');
var util=require('util');
var log4js=require("log4js");
var path=require("path");
var fs=require('fs');
var strftime=require('strftime').strftimeUTC;
var mkdirp=require('mkdirp');
var step=require('step');

var logger=log4js.getLogger("qarun");

var QA=require('libqa');

var DEBUG=true;

var CONFIG=null; /* global config object */

var Run=module.exports=function(opts) {
	var cfg=_.extend({
		configdir: null, 		// mandatory (where are the config files ?)
		snap_id: null,			// mandatory (which image profile : ivi ? generic ?)
		build_id: null,			// mandatory (which image is tested : which snapshot ? and from upstream OBS : tizen_xxx or Vannes OBS : tz_xxx)
		arch_id: null,			// mandatory (which architecture for the tested image ? i586 or x86_64)
		image_url: null,		// optional (image url)
		hwtarget: null, 		// mandatory (where to test: from etc/hwtargets.conf)
		executor: "default",		// optional (how to execute: from etc/test_exec.conf)
		report: "default",		// optional (how to report: from etc/test_reports.conf)
		profile: null,			// mandatory (what to test: from etc/test_suites.conf)
		dbdir: null 			// mandatory (top db dir)
	},opts);
	DEBUG && logger.debug("Creating QA run with options: \n"+util.inspect(cfg));

	// instanciate config object
	CONFIG=new QA.Config(cfg.configdir);

	// check hwtarget
	if (!(cfg.hwtarget in CONFIG.HWTARGETS)) 
		throw new Error("Hwtarget '"+cfg.hwtarget+"' not found in config");
	this.hwtarget=CONFIG.HWTARGETS[cfg.hwtarget];

	// create executor
	this.executor=new QA.Executor({
	    name: cfg.executor,
	    configdir: cfg.configdir
	});


	// check report
	if (!(cfg.report in CONFIG.REPORTS)) 
		throw new Error("Report '"+cfg.report+"' not found in config");
	this.report=CONFIG.REPORTS[cfg.report];
	this.report.id=cfg.report; // store id key inside object
	
	// check profile
	if (!(cfg.profile in CONFIG.PROFILES)) 
		throw new Error("Profile '"+cfg.profile+"' not found in config");
	this.profile=_.extend({
		filter: function(testcase) { return true; },
	},CONFIG.PROFILES[cfg.profile]);
	this.profile.id=cfg.profile; // store id key inside object

	// store image infos
	this.snap_id=cfg.snap_id; 
	this.build_id=cfg.build_id; // can be a snapshot name
	this.arch_id=cfg.arch_id; 
	// adjust build_id (remove anything not in "0-9.", remove leading and trailing dots)
	this.build_num=cfg.build_id.replace(/[^0-9\.]/g,".").replace(/\.+/g,".").replace(/(^\.|\.$)/g,"");
	if (this.build_num.length==0)
		throw new Error("Invalid build_num (empty after cleaning of build_id)");

	// store image url
	if (!cfg.image_url)
		cfg.image_url=cfg.build_id;
	
	/* we have to differentiate images according to : 
	   . location of the OBS repo : vannes or upstream 
	   . the architecture         : i586 or x86_64
	   . the verticle             : generic or ivi
	   All these information can be found by the /etc/tizen-snapshot file

	   generic vannes
	        |_ generic multiuser
			      |_ i586
				  |_ x86_64
			|_ generic devel
			      |_i586
			      |_x86_64
	   generic upstream
			      |_i586
			      |_x86_64
	   ivi
	*/
	if (/^http:\/\//.test(cfg.image_url)) {
		this.image_url=cfg.image_url;
	}
	
	if (/tzvannes/.test(cfg.build_id)) { // if it's a Vannes OBS image
		this.image_url="http://qaserver/images/";
		if (/generic/.test(cfg.snap_id)) { // if this is a generic image
			if (/multiuser/.test(cfg.snap_id)) { // this is a generic multiuser image
				if (/x86_64/.test(cfg.arch_id)) { // architecture is x86_64
					this.image_url+="generic-w64-multiuser-standard/";
				}
				else { // architecture is i586
					this.image_url+="generic-w32-multiuser-standard/";
				}
			}
			else {
				if (/devel/.test(cfg.snap_id)) { // if this is a generic devel image
					if (/x86_64/.test(cfg.arch_id)) { // architecture is x86_64
					this.image_url+="generic-w64-devel-standard/";
					}
					else {
						this.image_url+="generic-w32-devel-standard/"
					}
				}
			}						
			}
	}
	
	if (/tizen_/.test(cfg.build_id)) { // if it's an upstream OBS image
		this.image_url="http://download.tizen.org/snapshots/tizen/";
		if (/ivi/.test(cfg.snap_id)) { // if it's an ivi image
			this.image_url+="ivi/ivi/"
		}
		else { // this is a generic image obviously :)
			this.image_url+="common/";
			if (/x86_64/.test(cfg.arch_id)) { // if architecture is x86_64
				this.image_url+="common-wayland-x86_64/";
			}
			else { // architecture is i586
				this.image_url+="common-wayland-ia32/"
			}
		}
		// put the snapshot id : 
		this.image_url+=cfg.build_id;
	}

	// init database with dbdir
	this.db=new QA.Database(cfg.dbdir);

	// dry run flag
	this.dryrun=false;

	// generate our run id
	this.id=[
		this.build_id,
		this.profile.id,
		this.hwtarget.id,
		strftime("%Y%m%d.%H%M%SU")
	].join("_");
}

/***** methods ***************/

Run.prototype.enableDryRun=function() {
	this.dryrun=true;
	this.executor.setDryRun(this.dryrun);
}

Run.prototype.go=function(cb) {
	cb=cb||function() {};

	logger.info("Test run with options:\n"+util.inspect(this));

	var ctx={
		db_infos: null,
		testsuite: null,
		testkit_xmlbuf: null,
		testkit_file: "testkit.xml",
		testkit_file_list: null, // testkit xml files are stored in this table
		tarfile: null,
		cats_recipe: null,
		cats_file: null,
		services: null,

		report: this.report,
		hwtarget: this.hwtarget,
		profile: this.profile,
		build_num: this.build_num,
		snap_id: this.snap_id,
		build_id: this.build_id,
		arch_id: this.arch_id,
		image_url: this.image_url
	};

	/* create a default title if needed */
	this.profile.title = this._get_title();

	/* create tempdir */
	ctx.tempdir=path.join(QA.GLOBALS.local_tempdir,ctx.profile.name, DEBUG ? "" : this.id);
	try {
		mkdirp.sync(ctx.tempdir);
	}
	catch(e) {
		logger.error(e);
		throw e;
	}

	/* create the testsuite */
	ctx.testsuite=new QA.Testsuite(this.db,this.profile.suite,this.profile.filter);
	if(ctx.testsuite.isEmpty()) {
		throw new Error("No test case selected for the selected profile '"+this.profile.id+
				"' - suggestion: change filters in "+path.join(CONFIG.configdir,"test_suites.conf"));
	}


	var self=this;

	// generate testkit xmlbuf
	// TODO: recode with step or async.series calls to avoid ugly nesting
	this._startServices(ctx,function(err) {
		if (err) throw err;

		self._getDbVersion(ctx,function(err) {
			if (err) throw err;

			self._genTestKit(ctx,function(err) {
				if (err) throw err;

				// generate test tarball with testkit file
				self._genTarball(ctx,function(err) {
					if (err) throw err;

					// prepare/execute/merge/getResult/cleanup
					self.executor.prepare(ctx,function(err) {
						if (err) throw err;

						self.executor.execute(ctx,function(err) {
							if (err) throw err;

							self._stopServices(ctx,function(err) {
								if (err) throw err;

								self.executor.mergeResults(ctx,function(err,result) {
									if (err) throw err;

								    self.executor.getResult(ctx,function(err,result) {
									    if (err) throw err;

									// TODO: do something with result !

									self.executor.cleanup(ctx,function(err) {
										if (err) throw err;
										cb();
									});
								    });
								});
							});
						});
					});
				});
			});
		});
	});
}

Run.prototype._startServices=function(ctx,cb) {
	if (this.dryrun) {
		cb();
		return;
	}

	/* init the services for the testsuite */
	ctx.services=new QA.Services(ctx.testsuite,ctx);

	ctx.services.start(cb);
}

Run.prototype._stopServices=function(ctx,cb) {
	if (!ctx.services) {
		cb();
		return;
	}

	ctx.services.stop(function() {
		delete ctx.services;
		cb()
	});
}
		
	
Run.prototype._getDbVersion=function(ctx,cb) {
	this.db.getVersion(function(err,version,infos) {
		if (err) cb(err);
		ctx.db_infos="* Version: "+version+"\n"+"* Last 5 commits:\n"+infos;
		cb();
	});
}

Run.prototype._genTestKit=function(ctx,cb) {

	logger.info("Generating XML instructions for Testkit...");
	ctx.testkit_file_list = QA.TestKit.createXMLFiles(this.executor.name, ctx.profile, ctx.testsuite, ctx.tempdir);
	cb(); // no error
}


Run.prototype._genTarball=function(ctx,cb) {
	var self=this;

	QA.utils.pushd(this.db.getDir());

	// create tarball in temp dir
	ctx.tarfile=path.join(ctx.tempdir,"tests.tar");

	logger.info("Creating testcases archive");

	QA.utils.spawn(
		"tar create",
		"tar",
			[
				"--transform","s,^,"+QA.GLOBALS.tarball_topdir+"/,",
				"--show-transformed",
				"-c",
				"-v",
				"-f",
				ctx.tarfile
			]
			.concat(ctx.testsuite.getTarFileList()),
		function() {
			logger.info("Testcases archive created in "+ctx.tarfile);

			// add to tar
			// cd into dir to have testkit.xml 
			process.chdir(ctx.tempdir);

			QA.utils.spawn(
				"tar add",
				"tar",[
					"-rvf",
					ctx.tarfile,
				].concat(ctx.testkit_file_list.map(function(x){return x.name;})), // all testkit xml files are added to the tarball
				function() {
					// tarbal is ok
					logger.info("Added testkit file to tarball");

					// gzip it!
					QA.utils.spawn(
						"gzip tar",
						"gzip",
						["-f",ctx.tarfile],
						function() {
							ctx.tarfile=ctx.tarfile+".gz";

							logger.info("Tarball compressed successfully: "+ctx.tarfile);

							QA.utils.popd();

							cb();
						}
					);
				}
			);
		}
	);
}

Run.prototype._get_title=function(){
	return this.profile.title ? this.profile.title :
		// generate default title
		// '<target> Test Report: <hwproduct> <testtype> <date_YYYY-mm-dd> Build ID: <buildid>'
		[
			this.report.target, // Tizen PC
			"Test Report:",
			this.profile.test_type, // Sanity
			"%",
			this.hwtarget.product, // Lenovo X230 Tablet
			"-",
			strftime("%Y-%m-%d %H:%M UTC"), // 2013-01-22 
			"/ Build ",
			this.build_num,
			"(snapshot "+this.build_id+")"
		].join(" ");
}


