/*
 * QA Text Export class
 * Author: St√©phane Desneux <sdx@kooltux.org>
 * Date: 2013-02-06
 *
 * Copyright 2013, Intel Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

var _=require('underscore');
var _s = require('underscore.string');

var util=require('util');
var log4js=require("log4js");

var logger=log4js.getLogger("qaexpasciidoc");

var QA=require('libqa');

var DEBUG=false;

/* -------------- writer class --------------- */
function Writer() {
	this.buffer=[];
}

Writer.prototype.write=function() {
	Array.prototype.forEach.call(arguments,function(x) {
		if (x instanceof Array)
			this.write.apply(this,x);
		else
			this.buffer.push(x);
	},this);
}

Writer.prototype.prepend=function() {
	Array.prototype.forEach.call(arguments,function(x) {
		if (x instanceof Array)
			this.prepend.apply(this,x);
		else
			this.buffer.unshift(x);
	},this);
}

Writer.prototype.writeln=function() {
	this.write.apply(this,arguments);
	this.buffer.push('\n');
}

Writer.prototype.text=function() {
    return this.buffer.join('');
}

/* ------------------ plugin default options ---------------- */
var DEFAULTS={
};

/* ------------------ plugin class ---------------- */

var Plugin=module.exports=function(opts) {
	_.extend(this,
		_.extend(DEFAULTS,opts || {})
	);
}

Plugin.prototype.setId=function(id) {
	DEBUG && logger.debug("Plugin id: "+id);
	this.id=id;
}

Plugin.prototype.getFilename=function() {
	return "export_"+this.id+".asciidoc";
}

Plugin.prototype.execute=function(testsuite,cb) {
	var colors = { designed: 'red', ready: 'orange', approved: 'green', disabled: 'gray' };
	var w=new Writer();

	function highlightTODO(s) {
		return s
			.replace(/\b(TODO|FIXME|TBD)\b/g,"[red]#$1#")
		;
	}

	var fmts={ 
		stat: function(l,v){ w.write('* ',l,': [',v,']*',v,'*\n'); },
		puce: function(l,v){ w.write('* ',l,': *',v,'*\n'); },
		stepd: function(l,v){ w.write('. ',v,'\n'); },
		stepe: function(l,v){ w.write('- _',l,'_: *',v,'*\n'); },
		//desc: function(l,v){ w.write(l,':: ',v.replace(/\n/g," "),'\n'); }
		//desc: function(l,v){ w.write(l,':: ',v.replace(/\n/g,"\n+\n"),'\n\n'); }
		desc: function(l,v){ w.write(l,':: ',
			/\n/.test(v) ? '\n+\n' : '',
			highlightTODO(
				v.replace(/\r/g,"")
				.replace(/\n\s*\n/mg,"\n+\n")
			)
			,'\n\n'); 
		}
	};

	/*
	Returns the MediaWiki formatted links to bugs. 
	*/
	function formattedBugs(str) {
		return str
			.split(/\s+/)
			.filter(function(x) { return /\w+$/.test(x); }) // filter single "-" in bugs
			.map(function(x) { return "https://tz.otcshare.org/jira/browse/"+x+"["+x+"]" })
			.join(" ")
		;
	}

	function e(obj,fld,opt) {
	    var lbl = (opt && opt.lbl) || fld;
	    var fmt = (opt && opt.fmt) || fmts.puce;
	    if (fld in obj && obj[fld]!=='' && obj[fld]!='-')
		fmt(_s.capitalize(lbl),fld=='bugs'?formattedBugs(obj[fld]):_s.capitalize(obj[fld]));
	    else if(opt.alert) {
			switch(opt.alert) {
				case 2:
					fmt(_s.capitalize(lbl),'[gray]#To be defined#');
					break;
				case 1:
				default:
					fmt(_s.capitalize(lbl),'[yellow red-background big]#Undefined - Mandatory#');
					break;
			}
		}
	}

	if (!this.notestsuite)
		w.prepend("\n= Test Suite ",testsuite.getName(),'\n');

	var stats={
		count: 0,
		manual: 0,
		auto: 0,
		desc: 0,
		steps:0
	};

	testsuite.forEachTestset(function(tset) {
		w.write("\n"+(this.notestsuite?"":"=")+"= ",tset.getComponentName(),"\n");
		w.write("[gray]#Test Set id: ",tset.getId(),"#\n");
		
		tset.forEachTestcase(function(tcase) {
			stats.count++;

			var colo, obj=tcase.toExportable();

			if (this.tclink)
			    w.write("\n.Test Case ", this.tclink, tcase.getDirPath(), '/', tcase.filename, '#', (tcase.tcasenum-1), '[', obj.id, ']\n');
			else
			    w.write("\n.Test Case ",obj.id,'\n');


			// remove some unneeded fields
			// obj=_.omit(obj,['id','name']);

			e(obj,'priority',{alert:1});
			e(obj,'status',{alert:1,fmt:fmts.stat});
			e(obj,'type',{alert:1});
			e(obj,'exec_type',{alert:1,lbl:'execution'});
			e(obj,'objective',{alert:1,fmt:fmts.desc});
			e(obj,'description',{alert:2,fmt:fmts.desc});
			e(obj,'notes',{fmt:fmts.desc});
			e(obj,'bugs',{fmt:fmts.desc});

			if (typeof obj.description == 'string' && obj.description.length)
				stats.desc++;

			if (tcase.exec_type == "manual") {
				stats.manual++;

				e(obj,'pre_condition',{fmt:fmts.desc,lbl: "Pre-conditions"});
				if (obj.steps && obj.steps.length) {
					stats.steps++;
					var steps=obj.steps; 
					obj.steps="";
					w.write("Steps::\n");
	/* jb: use bullets
					steps.forEach(function(s) {
						e(s,'description',{alert:1,fmt: fmts.stepd});
						e(s,'expected',{fmt: fmts.stepe});
					});
	*/
	/* sdx: use table */
					w.write('+\n[cols="1,15,15", frame="topbot", grid="all",options="header"]\n');
					w.write('|===========================================\n');
					w.write('|Id|Description|Expected result\n');
					steps.forEach(function(s,idx) {
						w.write(['',idx+1,highlightTODO(s.description),highlightTODO(s.expected)].join("|")+"\n");
					});
					w.write('|===========================================\n');
	/* */
				}
				else {
					e({},'steps',{alert:2,fmt:fmts.desc});
				}
				e(obj,'post_condition', {fmt:fmts.desc,lbl:"Post-conditions"});
			}
			else {
				stats.auto++;
			}

			w.write('\n');

			// TODO: write automatic tests

		},this);
	
	},this);

	w.prepend([
		".Test cases statistics",
		'[cols="3,1>,1", width="80%", frame="topbot", grid="all", options="header"]',
		"|===========================================================",
		"| Item | Value | Comment ",
		"| Total testcases | "+stats.count+" | ",
		"| Manual testcases | "+stats.manual+" | ",
		"| Automatic testcases | "+stats.auto+" | ",
		"| Descriptions | " + stats.desc + " | "+((stats.desc==stats.count)?"":("[red]#Missing: "+(stats.count-stats.desc)+"#")),
		"| Execution steps | " + stats.steps + " | "+((stats.steps==stats.manual)?"":("[red]#Missing: "+(stats.manual-stats.steps)+"#")),
		"|==========================================================="
	].join("\n"));

	cb(w.text().replace(/\r/g,""));
}

