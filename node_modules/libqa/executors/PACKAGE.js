/*
 * QA Executor plugin: Direct (connect to target and run tests)
 * Author: Stéphane Desneux <sdx@kooltux.org>
 * Date: 2013-01-10
 *
 * Copyright 2013, Intel Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

var _=require('underscore');
var util=require('util');
var log4js=require("log4js");
var path=require("path");
var fs=require('fs');
var libxmljs=require('libxmljs');
var mkdirp=require('mkdirp');

var logger=log4js.getLogger("qapackage");

var QA=require('libqa');

var DEBUG=true;

var Plugin=module.exports=function(opts) {
    // plugin specific options
    _.extend(this,
		_.extend({
			user: 'root',
			test_timeout: 10800 // 3h
		},opts)
    );
}

// plugin API
Plugin.prototype.setId=function(id) {
    DEBUG && logger.debug("Plugin id: "+id);
    this.id=id;
}

Plugin.prototype.setOutput=function(output) {
    DEBUG && logger.debug("Plugin output: "+output);
    this.output=output;
}

Plugin.prototype.setDryrun=function(dry) {
    this.dryrun=dry;
}

/* ============= prepare step ======================== */
Plugin.prototype.prepare=function(ctx,cb) {
    logger.info("Preparing scripts to be executed on the device");
 
	this.suitedir     = ctx.tempdir;
	this.commondir    = path.join(this.suitedir, "common");
	this.packagingdir = path.join(this.suitedir, "packaging");
	this.runscript    = path.join(this.commondir, "runtest.sh");
	this.licensefile  = path.join(this.suitedir, "LICENSE");
	this.specfile     = path.join(this.packagingdir, ctx.profile.name + ".spec");
	this.manifestfile = path.join(this.packagingdir, ctx.profile.name + ".manifest");

	var rundir=path.join(QA.GLOBALS.hwtarget_packdir, path.basename(this.suitedir));
	var testkitfile="testkit.xml";
	var suitename=path.basename(this.suitedir);
	var suiteshortname  = suitename.split('-',3)[1];
	this.setOutput("/tmp/packages");
	
	try {
	    mkdirp.sync(path.join(this.commondir));
	    mkdirp.sync(path.join(this.packagingdir));
	    mkdirp.sync(this.output);
	}
	catch(e) {
	    logger.error(e);
	    throw e;
	} 
	
	logger.info("Packaging suite with options:\n"+util.inspect(this));

	// generate remote script - the script is different according the suite : core or web (crosswalk)
	var rbuf=[]; // buffer of remote script
	var sbuf=[]; // buffer of spec file
	var mbuf=[]; // buffer of manifest file
	var lbuf=[]; // buffer of license file
	
	if (ctx.profile.name === "common-crosswalk-suite") { 
	    rbuf.push("#!/bin/bash");
	    rbuf.push("");
        rbuf.push("# This program is free software; you can redistribute it and/or");
        rbuf.push("# modify it under the terms of the GNU General Public License");
        rbuf.push("# as published by the Free Software Foundation; either version 2");
        rbuf.push("# of the License, or (at your option) any later version.");
        rbuf.push("#");
        rbuf.push("# This program is distributed in the hope that it will be useful,");
        rbuf.push("# but WITHOUT ANY WARRANTY; without even the implied warranty of");
        rbuf.push("# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the");
        rbuf.push("# GNU General Public License for more details.");
        rbuf.push("#");
        rbuf.push("# You should have received a copy of the GNU General Public License");
        rbuf.push("# along with this program; if not, write to the Free Software");
        rbuf.push("# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.");
        rbuf.push("#");
        rbuf.push("# Authors: Nicolas Zingilé <nicolas.zingile@open.eurogiciel.org>");
        rbuf.push("");
	    rbuf.push("set -e");
	    rbuf.push("source /etc/tizen-platform.conf");
        rbuf.push("");
        rbuf.push("resdir=\"\"");
        rbuf.push("");
        rbuf.push("if [[ ! -z $1 ]]; then");
        rbuf.push("    resdir=$1");
        rbuf.push("else");
        rbuf.push("    exit 1");
        rbuf.push("fi");
        rbuf.push("");
	    rbuf.push("widgetsdb=/home/guest/.applications/dbspace/.app_info.db");
	    rbuf.push("widgetinstdir=/opt/usr/media/tct");
	    rbuf.push("testdir=" + path.join(rundir, "TESTDIR"));
	    rbuf.push("resfile=$resdir/$(basename $(pwd)).result.xml");
	    rbuf.push("");
//	    rbuf.push("PARALLEL_JOBS=${1:-1}");
//	    rbuf.push("function parallel_jobs {");
//	    rbuf.push("    local max_number=$((0 + ${1:-0}))");
//	    rbuf.push("    while true; do");
//	    rbuf.push("	jobs &>/dev/null");
//	    rbuf.push("	if [[ $(jobs -p | wc -l) -lt $max_number ]]; then");
//	    rbuf.push("	    break");
//	    rbuf.push("	fi");
//	    rbuf.push("	sleep 0.3");
//	    rbuf.push("    done");
//	    rbuf.push("}");
	    rbuf.push("");
	    rbuf.push("function get_widgetid () {");
	    rbuf.push("    sqlite3 $widgetsdb \"select x_slp_appid from app_info where name=\\\"$1\\\"\"");
	    rbuf.push("}");
	    rbuf.push("");
	    rbuf.push("function launch_testkit_stub () {");
	    rbuf.push("    if [[ -z $(ps -ef | grep testkit-stub | grep -v bash | grep -v grep) ]]; then");
	    rbuf.push("        echo 'testkit-stub is not launched... will be launched'");
	    rbuf.push("        testkit-stub --port:8000");
	    rbuf.push("    fi");
	    rbuf.push("}");
	    rbuf.push("");
	    rbuf.push("function install_widget () {");
	    rbuf.push("    local widgetzip=$(find $testdir -name $1*.wgt.zip)");
	    rbuf.push("    local widgetwgt=$widgetinstdir/opt/$1/$1.wgt");
	    rbuf.push("    [[ ! -d $widgetinstdir ]] && mkdir -p $widgetinstdir && echo \"$widgetinstdir directory created\"");
	    rbuf.push("    if [[ -z $2 ]]; then");
	    rbuf.push("        echo 'test widget will be uncompressed and installed...'");
	    rbuf.push("        unzip -u $widgetzip -d $widgetinstdir");
	    rbuf.push("        su - guest -c \"export DBUS_SESSION_BUS_ADDRESS=\\\"unix:path=/run/user/9999/dbus/user_bus_socket\\\"; export XDG_RUNTIME_DIR=\\\"/run/user/9999\\\"; pkgcmd -i -t wgt -q -p $widgetwgt\"");
	    rbuf.push("        widgetid=$(get_widgetid $1)");
	    rbuf.push("    fi");
	    rbuf.push("}");
	    rbuf.push("");
	    rbuf.push("function launch_test () {");
	    rbuf.push("   testfile=$1");
	    rbuf.push("   testtype=$2");
	    rbuf.push("");
	    rbuf.push("echo \"## execution script: running testkit on $testfile\"");
	    rbuf.push("case $testtype in");
	    rbuf.push("		web)");
	    rbuf.push("		    widgetname=$(basename $testfile .xml)");
	    rbuf.push("		    widgetid=$(get_widgetid $widgetname)");
	    rbuf.push("		    install_widget $widgetname $widgetid");
	    rbuf.push("		    testkit-lite -e 'su - guest -c \"export DBUS_SESSION_BUS_ADDRESS=\\\"unix:path=/run/user/9999/dbus/user_bus_socket\\\"; export XDG_RUNTIME_DIR=\\\"/run/user/9999\\\"; systemctl --user restart xwalk.service; app_launcher -s '$widgetid'\"' -f " + rundir + "/$widgetname.xml " + "--comm tizenlocal -o $resdir/$widgetname.result.xml");
	    rbuf.push("		;;");
	    rbuf.push("		standard)");
	    rbuf.push(["	    timeout", this.test_timeout,"testkit-lite","-f",rundir+"/$testfile","--comm", "tizenlocal","-o","$resfile"].join(" "));
	    rbuf.push("		;;");
	    rbuf.push("		*)");
	    rbuf.push("		    echo 'Unknown test type'");
	    rbuf.push("		    exit 1");
	    rbuf.push("	        ;;");
	    rbuf.push("   esac");
	    rbuf.push("}");
	    rbuf.push("");
	    rbuf.push("launch_testkit_stub");
	    rbuf.push("");
	    // apply a custom testkit lite : depending of setname, set widget id
	    rbuf.push("testlist_web='"+ctx.testkit_file_list
		.filter(
		    function(e) { return e.isweb; }
		)
		.map(
		    function(e){return e.name;}
		)
		.join(" ")
		+"'");
	    rbuf.push("");
	    rbuf.push("for tst in $testlist_web; do");
//	    rbuf.push("   parallel_jobs $PARALLEL_JOBS");
//	    rbuf.push("   launch_test $tst web &");
	    rbuf.push("   launch_test $tst web");
	    rbuf.push("done");
//	    rbuf.push("parallel_jobs 1");
	    rbuf.push("");
	    rbuf.push("testlist_standard='"+ctx.testkit_file_list
		.filter(
		    function(e) { return !e.isweb; }
		)
		.map(
		    function(e){return e.name;}
		)
		.join(" ")
		+"'");
	    rbuf.push("");
	    rbuf.push("for tst in $testlist_standard; do");
	    rbuf.push("   launch_test $tst standard");
	    rbuf.push("done");
	    rbuf.push("");
	    rbuf.push("echo '## execution script: finished'");
	}
	else {
	    rbuf.push("#!/bin/bash");
	    rbuf.push("#");
	    rbuf.push("# This program is free software; you can redistribute it and/or");
		rbuf.push("# modify it under the terms of the GNU General Public License");
		rbuf.push("# as published by the Free Software Foundation; either version 2");
		rbuf.push("# of the License, or (at your option) any later version.");
		rbuf.push("#");	
		rbuf.push("# This program is distributed in the hope that it will be useful,");
		rbuf.push("# but WITHOUT ANY WARRANTY; without even the implied warranty of");
		rbuf.push("# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the");
		rbuf.push("# GNU General Public License for more details.");
		rbuf.push("#");
		rbuf.push("# You should have received a copy of the GNU General Public License");
		rbuf.push("# along with this program; if not, write to the Free Software");
		rbuf.push("# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.");
		rbuf.push("#");
		rbuf.push("# Authors: Nicolas Zingilé <nicolas.zingile@open.eurogiciel.org>");
		rbuf.push("");
	    rbuf.push("set -e");
	    rbuf.push("resdir=/tmp");
	    rbuf.push("resfile=$resdir/testkit.result.xml");
	    rbuf.push("");
	    rbuf.push("echo '## execution script: preparing environment'");
	    rbuf.push("rm -rf $resdir/*.result.xml"); // remove all result files
	    rbuf.push("");
	    rbuf.push([
	    "timeout", this.test_timeout,"testkit-lite","-f",path.join(rundir, ctx.testkit_file_list[0].name),"--comm", "tizenlocal", // testkit.xml is always the last of the list
	    "-o", "$resfile"
	    ].join(" "));
	    rbuf.push("");
	    rbuf.push("echo '## execution script: finished'");
	}
	
	//---------------------------------------------------------------------------
    
	//generate spec file 

	sbuf.push("Name:            " + path.basename(this.suitedir));
	sbuf.push("Summary:         " + suiteshortname.charAt(0).toUpperCase() + suiteshortname.slice(1) + " suite for Tizen Common");
	sbuf.push("Version:         " + "1.0.0");
	sbuf.push("Release:         " + "1");
	sbuf.push("License:         " + "GPL-2.0");
	sbuf.push("Group:           " + "Development/Testing");
	sbuf.push("Source:          " + "%{name}-%{version}.tar.gz");
	sbuf.push("Source1001:      " + "%{name}.manifest");
	sbuf.push("BuildRoot:       " + "%{_tmppath}/%{name}-%{version}-build");
	sbuf.push("Requires:        " + "common-suite-launcher");
	sbuf.push("Requires:        " + "testkit-lite");
	if (suitename === "common-graphics-suite") { sbuf.push("Requires:        " + "wayland-fits-master") };
	if (suitename === "common-crosswalk-suite") { sbuf.push("Requires:        " + "testkit-stub") };
	sbuf.push("BuildArch:       " + "noarch");
	sbuf.push("");
	sbuf.push("");
	sbuf.push("%description");
	if (suitename === "common-connectivity-suite") {
	    sbuf.push("The " +suitename+ " validates the connectivity features of the Tizen Common image : wifi, bluetooth, nfc");
	}
	else if (suitename === "common-crosswalk-suite") {
	    sbuf.push("The " +suitename+ " validates web features of the Tizen Common image : web W3C api and device api using crosswalk");
	} 
	else if (suitename === "common-graphics-suite") {
	    sbuf.push("The " +suitename+ " validates graphical features of the Tizen Common image : wayland, wayland-efl integration - software and accelerated modes");
	}
	else if (suitename === "common-multimedia-suite") {
	    sbuf.push("The " +suitename+ " validates the multimedia features of the Tizen Common image : audio and video playing of media files of different formats with gstreamer");
	} 
	else if (suitename === "common-sanity-suite") { 
	    sbuf.push("The " +suitename+ " is the acceptance tests to validate the Tizen Common image");
	}
	else { 
	    sbuf.push("To fill"); 
	}
	sbuf.push("");
	sbuf.push("");
	sbuf.push("%prep");
	sbuf.push("%setup -q");
	sbuf.push("cp %{SOURCE1001} .");
	sbuf.push("");
	sbuf.push("");
	sbuf.push("%build");
	sbuf.push("");
	sbuf.push("");
	sbuf.push("%install");
	sbuf.push("install -d %{buildroot}/%{_datadir}/tests/%{name}");
	sbuf.push("install -m 0755 common/runtest.sh %{buildroot}/%{_datadir}/tests/%{name}");
	sbuf.push("install -m 0644 common/*.xml %{buildroot}/%{_datadir}/tests/%{name}");
	sbuf.push("cp -r common/TESTDIR %{buildroot}/%{_datadir}/tests/%{name}");
	sbuf.push("");
	sbuf.push("");
	sbuf.push("%files");
	sbuf.push("%manifest %{name}.manifest");
	sbuf.push("%defattr(-,root,root)");
	sbuf.push("%{_datadir}/tests/%{name}");

	// generate manifest file
	mbuf.push("<manifest>");
	mbuf.push(" <request>");
	mbuf.push("\t<domain name=\"_\"/>");
	mbuf.push(" </request>");
	mbuf.push("</manifest>");

	// write generated files 

	fs.writeFileSync(this.runscript,rbuf.join("\n"));
	logger.info("Run script script to be executed on the target : "+this.runscript);
	DEBUG && logger.debug("--------------------\n"+rbuf.join("\n")+"\n--------------------");

	fs.writeFileSync(this.specfile,sbuf.join("\n"));
	logger.info("Spec file of the suite : "+this.specfile);
	DEBUG && logger.debug("--------------------\n"+sbuf.join("\n")+"\n--------------------");
	
	fs.writeFileSync(this.manifestfile,mbuf.join("\n"));
	logger.info("Manifest file of the suite : "+this.manifestfile);
	DEBUG && logger.debug("--------------------\n"+mbuf.join("\n")+"\n--------------------");

	// uncompress content of test tarball and remove it
	var self=this;
	QA.utils.spawn(
	    "tar uncompress",
	    "tar", ["xvzf", path.join(self.suitedir, "tests.tar.gz"), "-C", self.commondir],
	    function () {
		logger.info("test tarball successfully uncompressed");
		QA.utils.spawn(
		    "rm -rf",
		    "rm", ["-rf", path.join(self.suitedir, "tests.tar.gz")],
		    function () {   
			logger.info("test tarball successfully deleted");
		    },
		    null,
		    null
		);
	    }
	);

	cb();
}

/* ============= execute step ======================== */
Plugin.prototype.execute=function(ctx,cb) {
    logger.info("Building generated test suite");
    
    if (this.dryrun) {
		logger.info("Skipping execution (dry-run)");
		cb();
		return;
    }
    else {
	logger.info("Copying suite folder in " + this.output);
	var self = this;
	var suitepkgdir = path.join(this.output,path.basename(this.suitedir));
	QA.utils.spawn(
	    "cp r",
	    "cp", ["-r", self.suitedir, self.output],
	    function () {
		logger.info("Suite directory successfully copied : " + suitepkgdir);
		QA.utils.spawn("git init",
				"git", ["init", suitepkgdir],
				function () {
				    logger.info("Initialization of git repository in suite directory successfull");
				    process.chdir(suitepkgdir);
				    QA.utils.spawn("gbs build", 
						    "gbs",["build", "--include-all"],
						    function () {   
							logger.info("Suite package : " + path.basename(self.suitedir) + " successfully built");
						    },
						    null,
						    function(data) {
							var lines = data.toString().split('\n');
							lines.forEach(function(line) { if (line.length > 15 ) DEBUG && logger.debug(line) });
						    }

				    );
				}
		);
	    }
	);
    }			
}


/* ============= merge results step ======================== */

Plugin.prototype.mergeResults=function(ctx,cb) {
    logger.info("Merging test results available in "+ctx.tempdir);

    if (this.dryrun) {
            logger.info("Skipping merging of results (dry-run)");
            cb();
            return;
    }
    
    cb();
}


/* ============= result step ======================== */
Plugin.prototype.getResult=function(ctx,cb) {
    logger.info("Fetching test results from target device");

        if(this.dryrun) {
	    logger.info("Skipping getting ot the results (dry-run)");
	    cb();
	    return;
	}
	else {
	    logger.info("Results are available in "+this.locallog);
	    cb(false,null);
	}
}




/* ============= cleanup step ======================== */
Plugin.prototype.cleanup=function(ctx,cb) {
    // nothing done here
    fs.unlink
    cb(false);
}
