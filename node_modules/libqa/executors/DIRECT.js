/*
 * QA Executor plugin: Direct (connect to target and run tests)
 * Author: St√©phane Desneux <sdx@kooltux.org>
 * Date: 2013-01-10
 *
 * Copyright 2013, Intel Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

var _=require('underscore');
var util=require('util');
var log4js=require("log4js");
var path=require("path");
var fs=require('fs');
var libxmljs=require('libxmljs');

var logger=log4js.getLogger("qadirect");

var QA=require('libqa');

var DEBUG=true;

var Plugin=module.exports=function(opts) {
    // plugin specific options
    _.extend(this,
		_.extend({
			user: 'root',
			test_timeout: 10800 // 3h
		},opts)
    );
}

// plugin API
Plugin.prototype.setId=function(id) {
    DEBUG && logger.debug("Plugin id: "+id);
    this.id=id;
}

Plugin.prototype.setOutput=function(output) {
    DEBUG && logger.debug("Plugin output: "+output);
    this.output=output;
}

Plugin.prototype.setDryrun=function(dry) {
    this.dryrun=dry;
}


/* ============= prepare step ======================== */
Plugin.prototype.prepare=function(ctx,cb) {
    logger.info("Preparing scripts to be executed on target device");
    
	// shortcuts
	var tmpdir=QA.GLOBALS.hwtarget_tempdir;
	var rundir=QA.GLOBALS.hwtarget_rundir;
	var ssh_target=this.user+"@"+ctx.hwtarget.hostname;
	var remotelog=path.join(rundir, path.basename(ctx.testkit_file,".xml")+".result.xml"); // must be named *.result.xml for qareporter plugin to work correctly

	// generate local and remote bash scripts that will be executed
	this.localscript=path.join(ctx.tempdir,"localscript.sh");
	this.remotescript=path.join(ctx.tempdir,"runtest.sh");
	this.locallog=path.join(ctx.tempdir,path.basename(remotelog));

	// generate local script
	var lbuf=[]; 
	lbuf.push("#!/bin/bash");
	lbuf.push("");
	lbuf.push("# this script was generated by "+__filename);
	lbuf.push("");
	lbuf.push("set -e");
	lbuf.push("");

	lbuf.push("echo 'copying tarball and remote script...'");
	lbuf.push([
		"ssh",
		ssh_target,
		"mkdir -p ",tmpdir
	].join(" "));

	lbuf.push([
		"scp",
		ctx.tarfile,
		this.remotescript,
		ssh_target+":"+tmpdir
	].join(" "));

	lbuf.push("echo 'executing remote script...'");
	lbuf.push([
		"ssh",
		ssh_target,
		"/bin/bash",path.join(QA.GLOBALS.hwtarget_tempdir,path.basename(this.remotescript))
	].join(" "));

	lbuf.push("echo 'getting results...'");
	lbuf.push([
		"scp",
		ssh_target+":"+ path.join(rundir, "*.result.xml"),// getting all result.xml files
		ctx.tempdir
	].join(" "));
	lbuf.push("");

	// generate remote script
	var rbuf=[]; // remote
	rbuf.push("#!/bin/bash");
	rbuf.push("# this script was generated by "+__filename);
	rbuf.push("");
	rbuf.push("set -e");
	rbuf.push("source /etc/tizen-platform.conf");
	rbuf.push("widgetsdb=/home/guest/.applications/dbspace/.app_info.db");
	rbuf.push("widgetinstdir=/opt/usr/media/tct");
	rbuf.push("testdir=/qa/TESTDIR");
	rbuf.push("");
	rbuf.push("function get_widgetid () {");
	//rbuf.push("    sqlite3 $widgetsdb \"select x_slp_appid from app_info where name=\\\"$1\\\"\" | awk -F. '{ print $2}'");
	rbuf.push("    sqlite3 $widgetsdb \"select x_slp_appid from app_info where name=\\\"$1\\\"\"");
	rbuf.push("}");
	rbuf.push("");
	rbuf.push("function launch_testkit_stub () {");
	rbuf.push("    if [[ -z $(ps -ef | grep testkit-stub | grep -v bash | grep -v grep) ]]; then");
	rbuf.push("        echo 'testkit-stub is not launched... will be launched'");
	rbuf.push("        testkit-stub --port:8000 --debug");
	rbuf.push("    fi");
	rbuf.push("}");
	rbuf.push("");
	rbuf.push("function install_widget () {");
	rbuf.push("    local widgetzip=$(find $testdir -name $1*.wgt.zip)");
	rbuf.push("    local widgetwgt=$widgetinstdir/opt/$1/$1.wgt");
	rbuf.push("    [[ ! -d $widgetinstdir ]] && mkdir -p $widgetinstdir && echo \"$widgetinstdir directory created\"");
	rbuf.push("    if [[ -z $2 ]]; then");
	rbuf.push("        echo 'test widget will be uncompressed and installed...'");
	rbuf.push("        unzip -u $widgetzip -d $widgetinstdir");
	rbuf.push("        su - guest -c \"export DBUS_SESSION_BUS_ADDRESS=\\\"unix:path=/run/user/9999/dbus/user_bus_socket\\\"; export XDG_RUNTIME_DIR=\\\"/run/user/9999\\\"; pkgcmd -i -t wgt -p $widgetwgt -q\"");
	rbuf.push("        widgetid=$(get_widgetid $1)");
	rbuf.push("    fi");
	rbuf.push("}");
	rbuf.push("");
	rbuf.push("function launch_widget () {");
	rbuf.push("    testkit-lite -e 'su - guest -c \"export DBUS_SESSION_BUS_ADDRESS=\\\"unix:path=/run/user/9999/dbus/user_bus_socket\\\"; export XDG_RUNTIME_DIR=\\\"/run/user/9999\\\"; systemctl --user restart xwalk.service; app_launcher -s '$2'\"' -f " + rundir + "/$1.xml " + "--comm tizenlocal -o " + rundir + "/$1.result.xml");
	rbuf.push("}");
	rbuf.push("");
	rbuf.push("launch_testkit_stub");
	rbuf.push("");
	rbuf.push("echo 'remote script: preparing environment'");
	rbuf.push("mkdir -p "+rundir);
	rbuf.push("cd "+rundir);
	rbuf.push("rm -rf *");//+QA.GLOBALS.tarball_topdir); // cleanup
	rbuf.push("tar xvf "+path.join(QA.GLOBALS.hwtarget_tempdir,path.basename(ctx.tarfile)));
	rbuf.push("chmod -R a+rwx ."); // let other users access this directory (yeah, this may be root dir, I know...)
	rbuf.push("rm -v "+path.join(QA.GLOBALS.hwtarget_tempdir,path.basename(ctx.tarfile))); // remove tar
	rbuf.push("rm -v "+path.join(QA.GLOBALS.hwtarget_tempdir,path.basename(this.remotescript))); // remove script
	rbuf.push("");

	// apply a custom testkit lite : depending of setname, set widget id
	ctx.testkit_file_list.forEach(function (element, index, array) {
	    rbuf.push("echo 'remote script: running testkit on " + element.name + "'");
	    rbuf.push("");
	    if (element.isweb) {
		rbuf.push("widgetname="+path.basename(element.name, ".xml"));
		rbuf.push("widgetid=$(get_widgetid $widgetname)");
		rbuf.push("install_widget $widgetname $widgetid");
		rbuf.push("launch_widget $widgetname $widgetid");
		rbuf.push("");
	    }
	    else {
		rbuf.push([
		//"screen", "-D", "-m",
		"timeout", this.test_timeout,"testkit-lite","-f",path.join(rundir,element.name),"--comm", "tizenlocal",
		"-o", path.join(rundir, path.basename(element.name, ".xml")) + ".result.xml"
		].join(" "));
		rbuf.push("");
	    }
	}, this);
	    rbuf.push("echo 'remote script: finished'");
	    rbuf.push("");

	//---------------------------------------------------------------------------

	fs.writeFileSync(this.localscript,lbuf.join("\n"));
	fs.writeFileSync(this.remotescript,rbuf.join("\n"));

	logger.info("Local script to be run: "+this.localscript);
	DEBUG && logger.debug("--------------------\n"+lbuf.join("\n")+"\n--------------------");
	logger.info("Remote script to be run: "+this.remotescript);
	DEBUG && logger.debug("--------------------\n"+rbuf.join("\n")+"\n--------------------");

	cb();
}

/* ============= execute step ======================== */
Plugin.prototype.execute=function(ctx,cb) {
    logger.info("Executing tests on target device");

    if (this.dryrun) {
		logger.info("Skipping execution (dry-run)");
		cb();
		return;
    }

	var remotelogger=log4js.getLogger("qatarget");
	var self=this;
	var buf="";

    QA.utils.spawn(
	    "direct test script",
	    "/bin/bash",
		[
			this.localscript
		],
	    function(rc,out,err,outerr) {
			if (buf.length) remotelogger.info(buf);
		    logger.info("Test execution script "+self.localscript+" completed successfully");
		    cb();
	    },
	    function(rc,out,err,outerr) {
			if (buf.length) remotelogger.info(buf);
			throw new Error("Test execution script "+self.localscript+" failed with retcode "+rc);
	    },
		function(data) {
			buf+=data.toString();

			var lines=buf.split("\n");

			if (lines.length)
				buf=lines.pop();// keep latest
			else
				buf="";

			lines.forEach(function(l) {remotelogger.info(l); });
		}
    );
}

/* ============= merge results step ======================== */

Plugin.prototype.mergeResults=function(ctx,cb) {
    logger.info("Merging test results available in "+ctx.tempdir);

    if (this.dryrun) {
	    logger.info("Skipping merging of results (dry-run)");
	    cb();
	    return;
    }

    var testkitXmlDoc = libxmljs.parseXml(fs.readFileSync(this.locallog).toString());
    var testkitTestDefElt  = testkitXmlDoc.root();
    var testkitSuiteElt = testkitXmlDoc.get('suite');
    var currentXmlfile = "";
    var currentXmlDoc = "";
    var currentSuiteElt = "";
    var currentSetElt = "";
    var currentTcases = "";

    ctx.testkit_file_list.forEach(function (element) {
	if (element.isweb){
	    currentXmlfile = path.join(ctx.tempdir, path.basename(element.name, '.xml') + '.result.xml');
	    currentXmlDoc = libxmljs.parseXml(fs.readFileSync(currentXmlfile));
	    currentSuiteElt = currentXmlDoc.get('suite');
	    currentSetElt = currentXmlDoc.get('suite/set');
	    currentTcases = currentSetElt.childNodes();
	    currentTcases.forEach(function (tcasenode, index) {
		if (tcasenode.type() === 'element'){
		    if (tcasenode.attr("result").value() === "BLOCK"){
			tcasenode.attr("result").value("N/A");
			tcasenode.childNodes().forEach(function (tcasenodechild) {
			    if(tcasenodechild.name() === "result_info"){
				tcasenodechild.childNodes().forEach(function (resultinfonode) {
				    if(resultinfonode.name() === "actual_result") {
					resultinfonode.text("N/A");
				    }
				});
			    }
			});
		    }
		}
	    });

	    logger.info("Merging results of " + path.join(ctx.tempdir, path.basename(element.name, '.xml') + '.result.xml'));
	    if (testkitSuiteElt == null) {
		testkitTestDefElt.addChild(currentSuiteElt);
	    }
	    else {
		testkitSuiteElt.addChild(currentSetElt);
	    }
	}
    });

    logger.info("Merging of results finished");

    logger.info("Writing final test result file");
    fs.writeFileSync(this.locallog, testkitXmlDoc.toString());
    logger.info("done !");

    cb();
}


/* ============= result step ======================== */
Plugin.prototype.getResult=function(ctx,cb) {
    logger.info("Fetching test results from target device");

	logger.info("Results are available in "+this.locallog);

	var report=ctx.report;
	var hwtarget=ctx.hwtarget;
	var profile=ctx.profile;
	var build_num=ctx.build_num;
	var build_id=ctx.build_id;
	var image_url=ctx.image_url;
	

	if (report.type == "qareport") {
		// upload to qareport site if needed
		var rest = require ('restler');
		var reportinfos={
			// from command line
			build_id: build_num,
			build_txt: "[["+image_url+" "+build_id+"]]", // not working to send a link

			// from etc/hwtargets.conf
			hwproduct: hwtarget.product,
			
			// from etc/test_reports.conf
			auth_token: report.auth_token,
			release_version: report.release_version,
			target: report.target,

			// from etc/test_suites.conf
			testtype: profile.test_type,
			title: profile.title,
			environment_txt: [
				(report.environment_header||""),
				"",
				(profile.environment ?
					(
						"=== '''Details''' ==="+
						profile.environment
					):
						null
				),
				"",
				"=== '''Image''' ===",
				"* Snapshot: "+build_id,
				"* Source: [["+image_url+" "+image_url+"]]",
				"",
/*					"=== '''QA Tests Database''' ===",
				ctx.db_infos,
				"",
*/
				"=== '''HW Target''' ===",
				"* Hostname: "+hwtarget.hostname,
				"* Platform: "+hwtarget.platform,
				(hwtarget.description ? 
					(
						"* Description: "+hwtarget.description
					)
					:
						null
				),
				""
			].filter(function(k){return (k!==null)}).join("\n"),
			objective_txt: profile.objective||"-",
			qa_summary_txt: profile.qa_summary||"-",
			issue_summary_txt: profile.issue_summary||"-",
		};

	 	var req = rest.post(report.server + '/api/import' , 
			{
          		method: "POST" ,
            	multipart: true ,
            	query: reportinfos ,
        		data: { 
					'report.1': rest.file(this.locallog, null, fs.statSync(this.locallog).size, null, 'application/xml')
				}
			}
		);
		req.on('complete', 
			function(result, response){
				if (result instanceof Error){
					logger.error("Error : "+ util.inspect(result));
    				cb(true,null);
				}
		
				DEBUG && logger.debug("Status : "+ response.statusCode);
				DEBUG && logger.debug("Result : "+ util.inspect(result));
    			cb(false,null);
			}
		);		
	}
	
	else {
    	cb(false,null);
	}
}

/* ============= cleanup step ======================== */
Plugin.prototype.cleanup=function(ctx,cb) {
    // nothing done here
	fs.unlink
    cb(false);
}
