/*
 * QA Executor plugin: Cats
 * Author: St√©phane Desneux <sdx@kooltux.org>
 * Date: 2013-01-10
 *
 * Copyright 2013, Intel Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

var _=require('underscore');
var util=require('util');
var log4js=require("log4js");
var path=require("path");
var fs=require('fs');

var logger=log4js.getLogger("qacats");

var QA=require('libqa');

var DEBUG=false;

var Plugin=module.exports=function(opts) {
    // plugin specific options
    _.extend(this,
		_.extend({},opts)
    );

    this._cats_file=null;
}

// plugin API
Plugin.prototype.setId=function(id) {
    DEBUG && logger.debug("Plugin id: "+id);
    this.id=id;
}

Plugin.prototype.setOutput=function(output) {
    DEBUG && logger.debug("Plugin output: "+output);
    this.output=output;
}

Plugin.prototype.setDryrun=function(dry) {
    this.dryrun=dry;
}

/* ============= prepare step ======================== */
Plugin.prototype.prepare=function(ctx,cb) {
    // ctx is an object passed by Run.js
    logger.info("Generating Cats Recipe");

    var recipe=this._genRecipe(ctx);

    DEBUG && logger.debug("CATS Recipe:\n"+recipe);

    this._cats_file=path.join(ctx.tempdir,"cats.recipe");
    fs.writeFileSync(this._cats_file,recipe);

    logger.info("Cats recipe generated: "+this._cats_file);

    cb();
}

Plugin.prototype._genRecipe=function(ctx) {
	var report=ctx.report;
	var hwtarget=ctx.hwtarget;
	var profile=ctx.profile;
	var build_num=ctx.build_num;
	var build_id=ctx.build_id;
	var image_url=ctx.image_url;

	// tests
	var rundir=QA.GLOBALS.hwtarget_rundir;
	var tkfile=path.join(rundir, "here", "here", ctx.testkit_file);
	var tklog=path.join(rundir, path.basename(ctx.testkit_file,".xml")+".result.xml"); // must be named *.result.xml for qareporter plugin to work correctly

	var download_files={};
	// source file on server => Dest path on target
	download_files[ctx.tarfile]=QA.GLOBALS.hwtarget_tempdir;

	// generate reporter
	var reporter_opt="reporter";
	var reporter;
	if (report.type == "qareport") {
		reporter={
			name: report.type, // 'qareport'
			kwargs:{
				// from command line
				build_id: build_num,
				//build_txt: "[["+image_url+" "+build_id+"]]", // not working to send a link

				// from etc/hwtargets.conf
				hwproduct: hwtarget.product,
				
				// from etc/test_reports.conf
				server: report.server,
				auth_token: report.auth_token,
				release_version: report.release_version,
				target: report.target,

				// from etc/test_suites.conf
				testtype: profile.test_type,
				title: profile.title,
				environment_txt: [
					(report.environment_header||""),
					"",
					(profile.environment ?
						(
							"=== '''Details''' ==="+
							profile.environment
						):
							null
					),
					"",
					"=== '''Image''' ===",
					"* Snapshot: "+build_id,
					"* Source: [["+image_url+" "+image_url+"]]",
					"",
/*					"=== '''QA Tests Database''' ===",
					ctx.db_infos,
					"",
*/
					"=== '''HW Target''' ===",
					"* Hostname: "+hwtarget.hostname,
					"* Platform: "+hwtarget.platform,
					(hwtarget.description ? 
						(
							"* Description: "+hwtarget.description
						)
						:
							null
					),
					""
				].filter(function(k){return (k!==null)}).join("\n"),
				objective_txt: profile.objective||"-",
				qa_summary_txt: profile.qa_summary||"-",
				issue_summary_txt: profile.issue_summary||"-",
			}
		};
	}
	else if (report.type == "none") {
		reporter_opt=";reporter";
		reporter={
			name: report.type
		};
	}

	return [
		// device section
		"[DEVICE]",
		"ip="+hwtarget.hostname,
		"",

		// image section
		"[IMAGE]",
		"uri="+image_url,
		"refresh=no",
		"",

		// Options
		"[OPTIONS]",
		// {'name':'noflash','kwargs':{'work_dir':'/root'}}
		"flasher="+QA.utils.obj2py({
			name:'noflash',
			kwargs: {
				work_dir: rundir
			}
		}),
		reporter_opt+"="+QA.utils.obj2py(reporter),
		"download_files="+QA.utils.obj2py(download_files),
		"",
	
		// test setup
		"[TEST_SETUP]",
		"name=init",
		"cmd="+[
			"mkdir -p "+rundir,
			"cd "+ rundir,
			"rm -rf "+QA.GLOBALS.tarball_topdir+" here", // cleanup
			"ln -s . here", // hack to call testkit-lite with a filename that has at least 4 elts in its path
			"tar xvf "+path.join(QA.GLOBALS.hwtarget_tempdir,path.basename(ctx.tarfile)),
			"chmod -R a+rwx .", // let other users access this directory (yeah, this may be root dir, I know...)
			"rm -v "+path.join(QA.GLOBALS.hwtarget_tempdir,path.basename(ctx.tarfile)), // remove tar
			""
		].join(";"),
		"",

		// the test
		"[TEST_1]",
		"name=qatests",
		"cmd="+[
			"screen","-D","-m",
			"testkit-lite",
			"-f",tkfile,
			"--comm","localhost",
			"-o",tklog
		].join(" "),
		"retrieve_log="+tklog,
		"timeout=864000" ,// i.e. not timeout handled by CATS
		"",

		// test finished
		"[TEST_DONE]",
		"name=finish",
		"cmd=echo 'Tests finished'",
		""
	].map(function(v) {
		return v.replace(/\n/g,"\\n");
	}).join("\n");
}

/* ============= execute step ======================== */
Plugin.prototype.execute=function(ctx,cb) {
    if (this.dryrun) {
		logger.info("Cats recipe not submitted (dryrun)");
		cb();
		return;
    }

    if (!this._cats_file)
		throw new Error("execute() called without prepare()");

    logger.info("Submitting Cats Recipe");

    QA.utils.spawn(
	    "cats client",
	    "cats-client",[
		    "submit_recipe",
		    "-f",
		    this._cats_file
	    ],
	    function(rc,out,err,outerr) {
		    logger.info(outerr);
		    logger.info("CATS Recipe completed successfully");
		    cb();
	    },
	    function(rc,out,err,outerr) {
		    // ignore errors
		    logger.info(outerr);
		    logger.info("CATS Recipe completed with retcode "+rc);
		    cb();
	    }
    );
}

/* ============= result step ======================== */
Plugin.prototype.getResult=function(ctx,cb) {
    // nothing done here
	logger.info("*** getResult not implemented for CATS ***");
    cb(false,null);
}

/* ============= cleanup step ======================== */
Plugin.prototype.cleanup=function(ctx,cb) {
    // nothing done here
	logger.info("Nothing to clean");
    cb(false);
}

