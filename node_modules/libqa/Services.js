/*
 * QA Service Manager class
 * Author: Jose Bollo <jobol@nonadev.net>
 * Date: 2013-01-30
 *
 * Copyright 2013, Intel Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

var _=require('underscore');
var util=require('util');
var log4js=require("log4js");
var path=require("path");

var logger=log4js.getLogger("qaserv");

var QA=require('libqa');

var DEBUG=false;

/*
MANAGEMENT OF SERVICES
======================

*/
var methodsCheck = {
    getName: true,
    start: true,
    stop: true,
    addTestcase: true,
    activate: false,
    added: false
};

/* -------------------- helper functions ---------------- */

/*
Returns true if 'item' has the 'method'.
*/
function hasMethod(item,method){
	return 'function' == typeof item[method];
}

/*
If the 'item' has the 'method', call the 'method'
with the remaining arguments and this set to 'item'.
*/
function callopt(item,method){
	var f=item[method];
	if ('function' == typeof f)
		return f.apply(item,Array.prototype.slice.call(arguments,2));
}

/* ----------------- Services class -------------------- */

/*
Creates the service manager for the given 'testsuite'.
*/
var Services=module.exports=function(testsuite,ctx) {
	logger.info("Creation of service manager for testsuite: "+testsuite.getName());
	this.services={};
	this.testsuite=testsuite;
	this.ctx=ctx;
	testsuite.forEachTestcase(function(tc){
		var sobj=tc.service;
		if(sobj) {
			for(var sname in sobj) {
				this.__set_service(sname,sobj[sname],tc);
			}
		}
	},this);
}

/*
Internal method to get a service.
 - 'name' (String): is the name of the service.
This method instantiate the service if not already done.
*/
Services.prototype.__get_service=function(name){
	var service=this.services[name];
	if(!service){
		var handler;
		logger.info("Loading service: "+name);
		try {
			handler=require("./services/"+name+".js");
		}
		catch(e){
			throw new Error("Can't get service '"+name+"'\nReason: "+e.toString());
		}
		DEBUG && logger.debug("Creating service: "+name);
		service=new handler(this,name);
		for(var m in methodsCheck){
			if(methodsCheck[m] && !hasMethod(service,m))
				throw new Error("Bad service: mandatory method '"+m+"' isn't defined.");
		};
		if(service.getName()!==name)
			throw new Error("Bad service: the name {"+name+"} isn't recorded as it should be.");
		this.services[name]=service;
		callopt(service,'added');
	}
	return service;
}


/*
Internal method to set a service.
 - 'name' (String): is the name of the service.
 - 'spec' (Any): is something telling the requiring of service.
 - 'tc' (QA.Testcase): is the testcase that requires the service
*/
Services.prototype.__set_service=function(name,spec,tc){
	var service=this.__get_service(name);
	DEBUG && logger.debug("add service {"+name+"} to testcase "+tc.getId());
	service.addTestcase(spec,tc);
}

/*
returns the database directory on the local filesystem
*/
Services.prototype.getDir=function(){
	return this.testsuite.getDir();
}

/*
*/
Services.prototype.start=function(cb){
	logger.info("Starting the services");
	var me=this;
	function stoperr(err){
		if(err) 
		    me.stop(function(){cb(err);});
		else
		    cb(err);
	};
	function compose(service,nextcb){
		return function(err){
			if(err)
				nextcb(err);
			else
				service.start(nextcb);
		}
	};
	var call=stoperr;
	_.values(this.services).forEach(function(s){
		call=compose(s,call);
	    });
	call(0);
}

/*
*/
Services.prototype.stop=function(cb){
	logger.info("Stopping the services");
	function compose(service,nextcb){
		return function(){
			service.stop(nextcb);
		}
	};
	_.values(this.services).forEach(function(s){
		cb=compose(s,cb);
	    });
	cb();
}


